export const elm = [
  {
    component: "Accordion",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { PaperProps } from '../Paper';\nimport { AccordionClasses } from './accordionClasses';\n\nexport interface AccordionProps extends StandardProps<PaperProps, 'onChange'> {\n  /**\n   * The content of the component.\n   */\n  children: NonNullable<React.ReactNode>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionClasses>;\n  /**\n   * If `true`, expands the accordion by default.\n   * @default false\n   */\n  defaultExpanded?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, it removes the margin between two expanded accordion items and the increase of height.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, expands the accordion, otherwise collapse it.\n   * Setting this prop enables control over the accordion.\n   */\n  expanded?: boolean;\n  /**\n   * Callback fired when the expand/collapse state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {boolean} expanded The `expanded` state of the accordion.\n   */\n  onChange?: (event: React.SyntheticEvent, expanded: boolean) => void;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children?: React.ReactElement<any, any> }\n  >;\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [Accordion API](https://mui.com/material-ui/api/accordion/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function Accordion(props: AccordionProps): JSX.Element;\n",
  },
  {
    component: "AccordionActions",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AccordionActionsClasses } from './accordionActionsClasses';\n\nexport interface AccordionActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionActionsClasses>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionActions API](https://mui.com/material-ui/api/accordion-actions/)\n */\nexport default function AccordionActions(props: AccordionActionsProps): JSX.Element;\n",
  },
  {
    component: "AccordionDetails",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AccordionDetailsClasses } from './accordionDetailsClasses';\n\nexport interface AccordionDetailsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionDetailsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionDetails API](https://mui.com/material-ui/api/accordion-details/)\n */\nexport default function AccordionDetails(props: AccordionDetailsProps): JSX.Element;\n",
  },
  {
    component: "AccordionSummary",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { AccordionSummaryClasses } from './accordionSummaryClasses';\n\nexport type AccordionSummaryTypeMap<\n  P = {},\n  D extends React.ElementType = 'div',\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<AccordionSummaryClasses>;\n    /**\n     * The icon to display as the expand indicator.\n     */\n    expandIcon?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionSummary API](https://mui.com/material-ui/api/accordion-summary/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const AccordionSummary: ExtendButtonBase<AccordionSummaryTypeMap>;\n\nexport type AccordionSummaryProps<\n  D extends React.ElementType = AccordionSummaryTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<AccordionSummaryTypeMap<P, D>, D>;\n\nexport default AccordionSummary;\n",
  },
  {
    component: "Alert",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { IconButtonProps, InternalStandardProps as StandardProps, SvgIconProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { AlertClasses } from './alertClasses';\n\nexport type AlertColor = 'success' | 'info' | 'warning' | 'error';\n\nexport interface AlertPropsVariantOverrides {}\n\nexport interface AlertPropsColorOverrides {}\n\nexport interface AlertProps extends StandardProps<PaperProps, 'variant'> {\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AlertClasses>;\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText?: string;\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color?: OverridableStringUnion<AlertColor, AlertPropsColorOverrides>;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    CloseButton?: React.ElementType;\n    CloseIcon?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    closeButton?: IconButtonProps;\n    closeIcon?: SvgIconProps;\n  };\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity?: AlertColor;\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role?: string;\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping?: Partial<Record<AlertColor, React.ReactNode>>;\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent) => void;\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant?: OverridableStringUnion<'standard' | 'filled' | 'outlined', AlertPropsVariantOverrides>;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    closeButton?: IconButtonProps;\n    closeIcon?: SvgIconProps;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    closeButton?: React.ElementType;\n    closeIcon?: React.ElementType;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Alert](https://mui.com/material-ui/react-alert/)\n *\n * API:\n *\n * - [Alert API](https://mui.com/material-ui/api/alert/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function Alert(props: AlertProps): JSX.Element;\n",
  },
  {
    component: "AlertTitle",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AlertTitleClasses } from './alertTitleClasses';\n\nexport interface AlertTitleProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AlertTitleClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Alert](https://mui.com/material-ui/react-alert/)\n *\n * API:\n *\n * - [AlertTitle API](https://mui.com/material-ui/api/alert-title/)\n */\nexport default function AlertTitle(props: AlertTitleProps): JSX.Element;\n",
  },
  {
    component: "AppBar",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { DistributiveOmit, OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { PropTypes, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { AppBarClasses } from './appBarClasses';\n\nexport interface AppBarPropsColorOverrides {}\n\nexport interface AppBarTypeMap<P = {}, D extends React.ElementType = 'header'> {\n  props: P &\n    DistributiveOmit<PaperProps, 'position' | 'color' | 'classes'> & {\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<AppBarClasses>;\n      /**\n       * The color of the component.\n       * It supports both default and custom theme colors, which can be added as shown in the\n       * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n       * @default 'primary'\n       */\n      color?: OverridableStringUnion<PropTypes.Color | 'transparent', AppBarPropsColorOverrides>;\n      /**\n       * If true, the `color` prop is applied in dark mode.\n       * @default false\n       */\n      enableColorOnDark?: boolean;\n      /**\n       * The positioning type. The behavior of the different options is described\n       * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\n       * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.\n       * @default 'fixed'\n       */\n      position?: 'fixed' | 'absolute' | 'sticky' | 'static' | 'relative';\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n    };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n *\n * API:\n *\n * - [AppBar API](https://mui.com/material-ui/api/app-bar/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\n\ndeclare const AppBar: OverridableComponent<AppBarTypeMap>;\n\nexport type AppBarProps<\n  D extends React.ElementType = AppBarTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<AppBarTypeMap<P, D>, D>;\n\nexport default AppBar;\n",
  },
  {
    component: "Autocomplete",
    doc: "import * as React from 'react';\nimport { IconButtonProps, InternalStandardProps as StandardProps, Theme } from '@mui/material';\nimport { ChipProps, ChipTypeMap } from '@mui/material/Chip';\nimport { PaperProps } from '@mui/material/Paper';\nimport { PopperProps } from '@mui/material/Popper';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport {\n  useAutocomplete,\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteInputChangeReason,\n  createFilterOptions,\n  UseAutocompleteProps,\n} from '@mui/base';\nimport { AutocompleteClasses } from './autocompleteClasses';\n\nexport {\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteInputChangeReason,\n  createFilterOptions,\n};\n\nexport type AutocompleteOwnerState<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n> = AutocompleteProps<T, Multiple, DisableClearable, FreeSolo, ChipComponent> & {\n  disablePortal: boolean;\n  expanded: boolean;\n  focused: boolean;\n  fullWidth: boolean;\n  hasClearIcon: boolean;\n  hasPopupIcon: boolean;\n  inputFocused: boolean;\n  popupOpen: boolean;\n  size: OverridableStringUnion<'small' | 'medium', AutocompletePropsSizeOverrides>;\n};\n\nexport type AutocompleteRenderGetTagProps = ({ index }: { index: number }) => {\n  key: number;\n  className: string;\n  disabled: boolean;\n  'data-tag-index': number;\n  tabIndex: -1;\n  onDelete: (event: any) => void;\n};\n\nexport interface AutocompleteRenderOptionState {\n  inputValue: string;\n  index: number;\n  selected: boolean;\n}\n\nexport interface AutocompleteRenderGroupParams {\n  key: string;\n  group: string;\n  children?: React.ReactNode;\n}\n\nexport interface AutocompleteRenderInputParams {\n  id: string;\n  disabled: boolean;\n  fullWidth: boolean;\n  size: 'small' | undefined;\n  InputLabelProps: ReturnType<ReturnType<typeof useAutocomplete>['getInputLabelProps']>;\n  InputProps: {\n    ref: React.Ref<any>;\n    className: string;\n    startAdornment: React.ReactNode;\n    endAdornment: React.ReactNode;\n  };\n  inputProps: ReturnType<ReturnType<typeof useAutocomplete>['getInputProps']>;\n}\n\nexport interface AutocompletePropsSizeOverrides {}\n\nexport interface AutocompleteProps<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n> extends UseAutocompleteProps<T, Multiple, DisableClearable, FreeSolo>,\n    StandardProps<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange' | 'children'> {\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps?: ChipProps<ChipComponent>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AutocompleteClasses>;\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon?: React.ReactNode;\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText?: string;\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText?: string;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    clearIndicator?: Partial<IconButtonProps>;\n    paper?: PaperProps;\n    popper?: Partial<PopperProps>;\n    popupIndicator?: Partial<IconButtonProps>;\n  };\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal?: boolean;\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon?: true | false | 'auto';\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText?: (more: number) => React.ReactNode;\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent?: React.JSXElementConstructor<React.HTMLAttributes<HTMLElement>>;\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps?: ReturnType<ReturnType<typeof useAutocomplete>['getListboxProps']> & {\n    sx?: SxProps<Theme>;\n  };\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading?: boolean;\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText?: React.ReactNode;\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags?: number;\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText?: React.ReactNode;\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText?: string;\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent?: React.JSXElementConstructor<React.HTMLAttributes<HTMLElement>>;\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent?: React.JSXElementConstructor<PopperProps>;\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon?: React.ReactNode;\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup?: (params: AutocompleteRenderGroupParams) => React.ReactNode;\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: (params: AutocompleteRenderInputParams) => React.ReactNode;\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: T,\n    state: AutocompleteRenderOptionState,\n  ) => React.ReactNode;\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags?: (\n    value: T[],\n    getTagProps: AutocompleteRenderGetTagProps,\n    ownerState: AutocompleteOwnerState<T, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n  ) => React.ReactNode;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', AutocompletePropsSizeOverrides>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    clearIndicator?: Partial<IconButtonProps>;\n    paper?: PaperProps;\n    popper?: Partial<PopperProps>;\n    popupIndicator?: Partial<IconButtonProps>;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/material-ui/api/autocomplete/)\n */\nexport default function Autocomplete<\n  T,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n>(props: AutocompleteProps<T, Multiple, DisableClearable, FreeSolo>): JSX.Element;\n",
  },
  {
    component: "Avatar",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { AvatarClasses } from './avatarClasses';\n\nexport interface AvatarPropsVariantOverrides {}\n\nexport interface AvatarTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * Used in combination with `src` or `srcSet` to\n     * provide an alt attribute for the rendered `img` element.\n     */\n    alt?: string;\n    /**\n     * Used to render icon or text elements inside the Avatar if `src` is not set.\n     * This can be an element, or just a string.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<AvatarClasses>;\n    /**\n     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.\n     * It can be used to listen for the loading error event.\n     */\n    imgProps?: React.ImgHTMLAttributes<HTMLImageElement> & {\n      sx?: SxProps<Theme>;\n    };\n    /**\n     * The `sizes` attribute for the `img` element.\n     */\n    sizes?: string;\n    /**\n     * The `src` attribute for the `img` element.\n     */\n    src?: string;\n    /**\n     * The `srcSet` attribute for the `img` element.\n     * Use this attribute for responsive image display.\n     */\n    srcSet?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The shape of the avatar.\n     * @default 'circular'\n     */\n    variant?: OverridableStringUnion<\n      'circular' | 'rounded' | 'square',\n      AvatarPropsVariantOverrides\n    >;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n *\n * API:\n *\n * - [Avatar API](https://mui.com/material-ui/api/avatar/)\n */\ndeclare const Avatar: OverridableComponent<AvatarTypeMap>;\n\nexport type AvatarProps<\n  D extends React.ElementType = AvatarTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<AvatarTypeMap<P, D>, D>;\n\nexport default Avatar;\n",
  },
  {
    component: "AvatarGroup",
    doc: "import * as React from 'react';\nimport { InternalStandardProps as StandardProps, Theme } from '@mui/material';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { AvatarGroupClasses } from './avatarGroupClasses';\nimport Avatar from '../Avatar';\n\nexport interface AvatarGroupPropsVariantOverrides {}\n\nexport interface AvatarGroupComponentsPropsOverrides {}\nexport interface AvatarGroupProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The avatars to stack.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AvatarGroupClasses>;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    additionalAvatar?: React.ComponentPropsWithRef<typeof Avatar> &\n      AvatarGroupComponentsPropsOverrides;\n  };\n  /**\n   * Max avatars to show before +x.\n   * @default 5\n   */\n  max?: number;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    additionalAvatar?: React.ComponentPropsWithRef<typeof Avatar> &\n      AvatarGroupComponentsPropsOverrides;\n  };\n  /**\n   * Spacing between avatars.\n   * @default 'medium'\n   */\n  spacing?: 'small' | 'medium' | number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The total number of avatars. Used for calculating the number of extra avatars.\n   * @default children.length\n   */\n  total?: number;\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant?: OverridableStringUnion<\n    'circular' | 'rounded' | 'square',\n    AvatarGroupPropsVariantOverrides\n  >;\n}\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n *\n * API:\n *\n * - [AvatarGroup API](https://mui.com/material-ui/api/avatar-group/)\n */\nexport default function AvatarGroup(props: AvatarGroupProps): JSX.Element;\n",
  },
  {
    component: "Backdrop",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { FadeProps } from '../Fade';\nimport { TransitionProps } from '../transitions/transition';\nimport { Theme } from '../styles';\nimport { BackdropClasses } from './backdropClasses';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\n\nexport interface BackdropComponentsPropsOverrides {}\n\nexport interface BackdropTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P &\n    Partial<Omit<FadeProps, 'children'>> & {\n      /**\n       * The content of the component.\n       */\n      children?: React.ReactNode;\n      /**\n       * The components used for each slot inside.\n       *\n       * This prop is an alias for the `slots` prop.\n       * It's recommended to use the `slots` prop instead.\n       *\n       * @default {}\n       */\n      components?: {\n        Root?: React.ElementType;\n      };\n      /**\n       * The extra props for the slot components.\n       * You can override the existing props or add new ones.\n       *\n       * This prop is an alias for the `slotProps` prop.\n       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n       *\n       * @default {}\n       */\n      componentsProps?: {\n        root?: React.HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides;\n      };\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<BackdropClasses>;\n      /**\n       * If `true`, the backdrop is invisible.\n       * It can be used when rendering a popover or a custom select component.\n       * @default false\n       */\n      invisible?: boolean;\n      /**\n       * If `true`, the component is shown.\n       */\n      open: boolean;\n      /**\n       * The extra props for the slot components.\n       * You can override the existing props or add new ones.\n       *\n       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n       *\n       * @default {}\n       */\n      slotProps?: {\n        root?: React.HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides;\n      };\n      /**\n       * The components used for each slot inside.\n       *\n       * This prop is an alias for the `components` prop, which will be deprecated in the future.\n       *\n       * @default {}\n       */\n      slots?: {\n        root?: React.ElementType;\n      };\n\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n      /**\n       * The duration for the transition, in milliseconds.\n       * You may specify a single timeout for all transitions, or individually with an object.\n       */\n      transitionDuration?: TransitionProps['timeout'];\n      /**\n       * The component used for the transition.\n       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n       * @default Fade\n       */\n      TransitionComponent?: React.JSXElementConstructor<\n        TransitionProps & { children: React.ReactElement<any, any> }\n      >;\n    };\n  defaultComponent: D;\n}\n\ntype BackdropRootProps = NonNullable<BackdropTypeMap['props']['componentsProps']>['root'];\n\nexport declare const BackdropRoot: React.FC<BackdropRootProps>;\n\n/**\n *\n * Demos:\n *\n * - [Backdrop](https://mui.com/material-ui/react-backdrop/)\n *\n * API:\n *\n * - [Backdrop API](https://mui.com/material-ui/api/backdrop/)\n * - inherits [Fade API](https://mui.com/material-ui/api/fade/)\n */\ndeclare const Backdrop: OverridableComponent<BackdropTypeMap>;\n\nexport type BackdropProps<\n  D extends React.ElementType = BackdropTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BackdropTypeMap<P, D>, D>;\n\nexport default Backdrop;\n",
  },
  {
    component: "Badge",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { BadgeUnstyledTypeMap, ExtendBadgeUnstyledTypeMap } from '@mui/base/BadgeUnstyled';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BadgeClasses } from './badgeClasses';\n\nexport interface BadgePropsVariantOverrides {}\n\nexport interface BadgePropsColorOverrides {}\n\nexport interface BadgeOrigin {\n  vertical: 'top' | 'bottom';\n  horizontal: 'left' | 'right';\n}\n\nexport type BadgeTypeMap<\n  D extends React.ElementType = 'span',\n  P = {},\n> = ExtendBadgeUnstyledTypeMap<{\n  props: P & {\n    /**\n     * The anchor of the badge.\n     * @default {\n     *   vertical: 'top',\n     *   horizontal: 'right',\n     * }\n     */\n    anchorOrigin?: BadgeOrigin;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<BadgeClasses>;\n    /**\n     * @ignore\n     */\n    className?: string;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'default'\n     */\n    color?: OverridableStringUnion<\n      'primary' | 'secondary' | 'default' | 'error' | 'info' | 'success' | 'warning',\n      BadgePropsColorOverrides\n    >;\n    /**\n     * The extra props for the slot components.\n     * You can override the existing props or add new ones.\n     *\n     * This prop is an alias for the `slotProps` prop.\n     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n     *\n     * @default {}\n     */\n    componentsProps?: BadgeUnstyledTypeMap['props']['slotProps'];\n    /**\n     * The components used for each slot inside.\n     *\n     * This prop is an alias for the `slots` prop.\n     * It's recommended to use the `slots` prop instead.\n     *\n     * @default {}\n     */\n    components?: {\n      Root?: React.ElementType;\n      Badge?: React.ElementType;\n    };\n    /**\n     * Wrapped shape the badge should overlap.\n     * @default 'rectangular'\n     */\n    overlap?: 'rectangular' | 'circular';\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * @default 'standard'\n     */\n    variant?: OverridableStringUnion<'standard' | 'dot', BadgePropsVariantOverrides>;\n  };\n  defaultComponent: D;\n}>;\n\ntype BadgeRootProps = NonNullable<BadgeTypeMap['props']['slotProps']>['root'];\ntype BadgeBadgeProps = NonNullable<BadgeTypeMap['props']['slotProps']>['badge'];\n\nexport declare const BadgeRoot: React.FC<BadgeRootProps>;\nexport declare const BadgeMark: React.FC<BadgeBadgeProps>;\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n * - [Badge](https://mui.com/material-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/material-ui/api/badge/)\n */\ndeclare const Badge: OverridableComponent<BadgeTypeMap>;\n\nexport type BadgeProps<\n  D extends React.ElementType = BadgeTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BadgeTypeMap<D, P>, D>;\n\nexport default Badge;\n",
  },
  {
    component: "BottomNavigation",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BottomNavigationClasses } from './bottomNavigationClasses';\n\nexport interface BottomNavigationTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<BottomNavigationClasses>;\n    /**\n     * Callback fired when the value changes.\n     *\n     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n     * @param {any} value We default to the index of the child.\n     */\n    onChange?: (event: React.SyntheticEvent, value: any) => void;\n    /**\n     * If `true`, all `BottomNavigationAction`s will show their labels.\n     * By default, only the selected `BottomNavigationAction` will show its label.\n     * @default false\n     */\n    showLabels?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The value of the currently selected `BottomNavigationAction`.\n     */\n    value?: any;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Bottom Navigation](https://mui.com/material-ui/react-bottom-navigation/)\n *\n * API:\n *\n * - [BottomNavigation API](https://mui.com/material-ui/api/bottom-navigation/)\n */\ndeclare const BottomNavigation: OverridableComponent<BottomNavigationTypeMap>;\n\nexport type BottomNavigationProps<\n  D extends React.ElementType = BottomNavigationTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BottomNavigationTypeMap<P, D>, D>;\n\nexport default BottomNavigation;\n",
  },
  {
    component: "BottomNavigationAction",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { BottomNavigationActionClasses } from './bottomNavigationActionClasses';\n\nexport type BottomNavigationActionTypeMap<\n  P,\n  D extends React.ElementType,\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * This prop isn't supported.\n     * Use the `component` prop if you need to change the children structure.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<BottomNavigationActionClasses>;\n    /**\n     * The icon to display.\n     */\n    icon?: React.ReactNode;\n    /**\n     * The label element.\n     */\n    label?: React.ReactNode;\n    /**\n     * If `true`, the `BottomNavigationAction` will show its label.\n     * By default, only the selected `BottomNavigationAction`\n     * inside `BottomNavigation` will show its label.\n     *\n     * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.\n     */\n    showLabel?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * You can provide your own value. Otherwise, we fallback to the child position index.\n     */\n    value?: any;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Bottom Navigation](https://mui.com/material-ui/react-bottom-navigation/)\n *\n * API:\n *\n * - [BottomNavigationAction API](https://mui.com/material-ui/api/bottom-navigation-action/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const BottomNavigationAction: ExtendButtonBase<\n  BottomNavigationActionTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type BottomNavigationActionProps<\n  D extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BottomNavigationActionTypeMap<P, D>, D>;\n\nexport default BottomNavigationAction;\n",
  },
  {
    component: "Box",
    doc: "import { BoxTypeMap } from '@mui/system';\nimport { OverridableComponent } from '@mui/types';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme as MaterialTheme } from '../styles';\n\n/**\n *\n * Demos:\n *\n * - [Box](https://mui.com/material-ui/react-box/)\n *\n * API:\n *\n * - [Box API](https://mui.com/material-ui/api/box/)\n */\ndeclare const Box: OverridableComponent<BoxTypeMap<{}, 'div', MaterialTheme>>;\n\nexport type BoxProps<\n  D extends React.ElementType = BoxTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BoxTypeMap<P, D, MaterialTheme>, D>;\n\nexport default Box;\n",
  },
  {
    component: "Breadcrumbs",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BreadcrumbsClasses } from './breadcrumbsClasses';\nimport SvgIcon from '../SvgIcon';\n\nexport interface BreadcrumbsCollapsedIconSlotPropsOverrides {}\n\nexport interface BreadcrumbsOwnerState extends BreadcrumbsProps {\n  expanded: boolean;\n}\n\nexport interface BreadcrumbsTypeMap<P = {}, D extends React.ElementType = 'nav'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<BreadcrumbsClasses>;\n    /**\n     * The components used for each slot inside the Breadcumb.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: {\n      CollapsedIcon?: React.ElementType;\n    };\n    /**\n     * The props used for each slot inside the Breadcumb.\n     * @default {}\n     */\n    slotProps?: {\n      /**\n       * Props applied to the CollapsedIcon slot.\n       * @default {}\n       */\n      collapsedIcon?: SlotComponentProps<\n        typeof SvgIcon,\n        BreadcrumbsCollapsedIconSlotPropsOverrides,\n        BreadcrumbsOwnerState\n      >;\n    };\n    /**\n     * Override the default label for the expand button.\n     *\n     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n     * @default 'Show path'\n     */\n    expandText?: string;\n    /**\n     * If max items is exceeded, the number of items to show after the ellipsis.\n     * @default 1\n     */\n    itemsAfterCollapse?: number;\n    /**\n     * If max items is exceeded, the number of items to show before the ellipsis.\n     * @default 1\n     */\n    itemsBeforeCollapse?: number;\n    /**\n     * Specifies the maximum number of breadcrumbs to display. When there are more\n     * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\n     * will be shown, with an ellipsis in between.\n     * @default 8\n     */\n    maxItems?: number;\n    /**\n     * Custom separator node.\n     * @default '/'\n     */\n    separator?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n *\n * API:\n *\n * - [Breadcrumbs API](https://mui.com/material-ui/api/breadcrumbs/)\n */\ndeclare const Breadcrumbs: OverridableComponent<BreadcrumbsTypeMap>;\n\nexport type BreadcrumbsProps<\n  D extends React.ElementType = BreadcrumbsTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<BreadcrumbsTypeMap<P, D>, D>;\n\nexport default Breadcrumbs;\n",
  },
  {
    component: "Button",
    doc: "import * as React from 'react';\nimport { DistributiveOmit, OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps, OverridableComponent, OverridableTypeMap } from '../OverridableComponent';\nimport { ButtonClasses } from './buttonClasses';\n\nexport interface ButtonPropsVariantOverrides {}\n\nexport interface ButtonPropsColorOverrides {}\n\nexport interface ButtonPropsSizeOverrides {}\n\nexport type ButtonTypeMap<\n  P = {},\n  D extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ButtonClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'primary'\n     */\n    color?: OverridableStringUnion<\n      'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\n      ButtonPropsColorOverrides\n    >;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, no elevation is used.\n     * @default false\n     */\n    disableElevation?: boolean;\n    /**\n     * If `true`, the  keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * Element placed after the children.\n     */\n    endIcon?: React.ReactNode;\n    /**\n     * If `true`, the button will take up the full width of its container.\n     * @default false\n     */\n    fullWidth?: boolean;\n    /**\n     * The URL to link to when the button is clicked.\n     * If defined, an `a` element will be used as the root node.\n     */\n    href?: string;\n    /**\n     * The size of the component.\n     * `small` is equivalent to the dense button styling.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', ButtonPropsSizeOverrides>;\n    /**\n     * Element placed before the children.\n     */\n    startIcon?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * @default 'text'\n     */\n    variant?: OverridableStringUnion<\n      'text' | 'outlined' | 'contained',\n      ButtonPropsVariantOverrides\n    >;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n * utility to create component types that inherit props from ButtonBase.\n * This component has an additional overload if the `href` prop is set which\n * can make extension quite tricky\n */\nexport interface ExtendButtonTypeMap<M extends OverridableTypeMap> {\n  props: M['props'] &\n    (M['props'] extends { classes?: Record<string, string> }\n      ? DistributiveOmit<ButtonTypeMap['props'], 'classes'>\n      : ButtonTypeMap['props']);\n  defaultComponent: M['defaultComponent'];\n}\n\nexport type ExtendButton<M extends OverridableTypeMap> = ((\n  props: { href: string } & OverrideProps<ExtendButtonBaseTypeMap<M>, 'a'>,\n) => JSX.Element) &\n  OverridableComponent<ExtendButtonBaseTypeMap<M>>;\n\n/**\n *\n * Demos:\n *\n * - [Button Group](https://mui.com/material-ui/react-button-group/)\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/material-ui/api/button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Button: ExtendButtonBase<ButtonTypeMap>;\n\nexport type ButtonProps<\n  D extends React.ElementType = ButtonTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ButtonTypeMap<P, D>, D>;\n\nexport default Button;\n",
  },
  {
    component: "ButtonBase",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { TouchRippleActions, TouchRippleProps } from './TouchRipple';\nimport { OverrideProps, OverridableComponent, OverridableTypeMap } from '../OverridableComponent';\nimport { ButtonBaseClasses } from './buttonBaseClasses';\n\nexport interface ButtonBaseTypeMap<P = {}, D extends React.ElementType = 'button'> {\n  props: P & {\n    /**\n     * A ref for imperative actions.\n     * It currently only supports `focusVisible()` action.\n     */\n    action?: React.Ref<ButtonBaseActions>;\n    /**\n     * If `true`, the ripples are centered.\n     * They won't start at the cursor interaction position.\n     * @default false\n     */\n    centerRipple?: boolean;\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ButtonBaseClasses>;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the ripple effect is disabled.\n     *\n     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n     * @default false\n     */\n    disableRipple?: boolean;\n    /**\n     * If `true`, the touch ripple effect is disabled.\n     * @default false\n     */\n    disableTouchRipple?: boolean;\n    /**\n     * If `true`, the base button will have a keyboard focus ripple.\n     * @default false\n     */\n    focusRipple?: boolean;\n    /**\n     * This prop can help identify which element has keyboard focus.\n     * The class name will be applied when the element gains the focus through keyboard interaction.\n     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n     * if needed.\n     */\n    focusVisibleClassName?: string;\n    /**\n     * The component used to render a link when the `href` prop is provided.\n     * @default 'a'\n     */\n    LinkComponent?: React.ElementType;\n    /**\n     * Callback fired when the component is focused with a keyboard.\n     * We trigger a `onFocus` callback too.\n     */\n    onFocusVisible?: React.FocusEventHandler<any>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * @default 0\n     */\n    tabIndex?: NonNullable<React.HTMLAttributes<any>['tabIndex']>;\n    /**\n     * Props applied to the `TouchRipple` element.\n     */\n    TouchRippleProps?: Partial<TouchRippleProps>;\n    /**\n     * A ref that points to the `TouchRipple` element.\n     */\n    touchRippleRef?: React.Ref<TouchRippleActions>;\n  };\n  defaultComponent: D;\n}\n\n/**\n * utility to create component types that inherit props from ButtonBase.\n * This component has an additional overload if the `href` prop is set which\n * can make extension quite tricky\n */\nexport interface ExtendButtonBaseTypeMap<M extends OverridableTypeMap> {\n  props: M['props'] & Omit<ButtonBaseTypeMap['props'], 'classes'>;\n  defaultComponent: M['defaultComponent'];\n}\n\nexport type ExtendButtonBase<M extends OverridableTypeMap> = ((\n  props: { href: string } & OverrideProps<ExtendButtonBaseTypeMap<M>, 'a'>,\n) => JSX.Element) &\n  OverridableComponent<ExtendButtonBaseTypeMap<M>>;\n\n/**\n * `ButtonBase` contains as few styles as possible.\n * It aims to be a simple building block for creating a button.\n * It contains a load of style reset and some focus/ripple logic.\n *\n * Demos:\n *\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ButtonBase: ExtendButtonBase<ButtonBaseTypeMap>;\n\nexport type ButtonBaseProps<\n  D extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ButtonBaseTypeMap<P, D>, D>;\n\nexport interface ButtonBaseActions {\n  focusVisible(): void;\n}\n\nexport default ButtonBase;\n",
  },
  {
    component: "ButtonGroup",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { ButtonGroupClasses } from './buttonGroupClasses';\n\nexport interface ButtonGroupPropsColorOverrides {}\nexport interface ButtonGroupPropsVariantOverrides {}\nexport interface ButtonGroupPropsSizeOverrides {}\n\nexport interface ButtonGroupTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ButtonGroupClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'primary'\n     */\n    color?: OverridableStringUnion<\n      'inherit' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n      ButtonGroupPropsColorOverrides\n    >;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, no elevation is used.\n     * @default false\n     */\n    disableElevation?: boolean;\n    /**\n     * If `true`, the button keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * If `true`, the button ripple effect is disabled.\n     * @default false\n     */\n    disableRipple?: boolean;\n    /**\n     * If `true`, the buttons will take up the full width of its container.\n     * @default false\n     */\n    fullWidth?: boolean;\n    /**\n     * The component orientation (layout flow direction).\n     * @default 'horizontal'\n     */\n    orientation?: 'vertical' | 'horizontal';\n    /**\n     * The size of the component.\n     * `small` is equivalent to the dense button styling.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', ButtonGroupPropsSizeOverrides>;\n    /**\n     * The variant to use.\n     * @default 'outlined'\n     */\n    variant?: OverridableStringUnion<\n      'text' | 'outlined' | 'contained',\n      ButtonGroupPropsVariantOverrides\n    >;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Button Group](https://mui.com/material-ui/react-button-group/)\n *\n * API:\n *\n * - [ButtonGroup API](https://mui.com/material-ui/api/button-group/)\n */\ndeclare const ButtonGroup: OverridableComponent<ButtonGroupTypeMap>;\n\nexport type ButtonGroupProps<\n  D extends React.ElementType = ButtonGroupTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ButtonGroupTypeMap<P, D>, D>;\n\nexport default ButtonGroup;\n",
  },
  {
    component: "Card",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { DistributiveOmit } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { CardClasses } from './cardClasses';\n\n// TODO: v6 remove this interface, it is not used\nexport interface CardPropsColorOverrides {}\n\nexport interface CardTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P &\n    DistributiveOmit<PaperProps, 'classes'> & {\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<CardClasses>;\n      /**\n       * If `true`, the card will use raised styling.\n       * @default false\n       */\n      raised?: boolean;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n    };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [Card API](https://mui.com/material-ui/api/card/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\n\ndeclare const Card: OverridableComponent<CardTypeMap>;\n\nexport type CardProps<\n  D extends React.ElementType = CardTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<CardTypeMap<P, D>, D>;\n\nexport default Card;\n",
  },
  {
    component: "CardActionArea",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { CardActionAreaClasses } from './cardActionAreaClasses';\n\nexport type CardActionAreaTypeMap<P, D extends React.ElementType> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<CardActionAreaClasses>;\n    focusVisibleClassName?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardActionArea API](https://mui.com/material-ui/api/card-action-area/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const CardActionArea: ExtendButtonBase<\n  CardActionAreaTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type CardActionAreaProps<\n  D extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<CardActionAreaTypeMap<P, D>, D>;\n\nexport default CardActionArea;\n",
  },
  {
    component: "CardActions",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { CardActionsClasses } from './cardActionsClasses';\n\nexport interface CardActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardActionsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardActions API](https://mui.com/material-ui/api/card-actions/)\n */\nexport default function CardActions(props: CardActionsProps): JSX.Element;\n",
  },
  {
    component: "CardContent",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { CardContentClasses } from './cardContentClasses';\n\nexport interface CardContentTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<CardContentClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardContent API](https://mui.com/material-ui/api/card-content/)\n */\ndeclare const CardContent: OverridableComponent<CardContentTypeMap>;\n\nexport type CardContentProps<\n  D extends React.ElementType = CardContentTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<CardContentTypeMap<P, D>, D>;\n\nexport default CardContent;\n",
  },
  {
    component: "CardHeader",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { TypographyProps } from '../Typography';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { CardHeaderClasses } from './cardHeaderClasses';\n\nexport interface CardHeaderTypeMap<\n  Props = {},\n  DefaultComponent extends React.ElementType = 'div',\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> {\n  props: Props & {\n    /**\n     * The action to display in the card header.\n     */\n    action?: React.ReactNode;\n    /**\n     * The Avatar element to display.\n     */\n    avatar?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<CardHeaderClasses>;\n    /**\n     * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n     * This can be useful to render an alternative Typography variant by wrapping\n     * the `title` text, and optional `subheader` text\n     * with the Typography component.\n     * @default false\n     */\n    disableTypography?: boolean;\n    /**\n     * The content of the component.\n     */\n    subheader?: React.ReactNode;\n    /**\n     * These props will be forwarded to the subheader\n     * (as long as disableTypography is not `true`).\n     */\n    subheaderTypographyProps?: TypographyProps<\n      SubheaderTypographyComponent,\n      { component?: SubheaderTypographyComponent }\n    >;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The content of the component.\n     */\n    title?: React.ReactNode;\n    /**\n     * These props will be forwarded to the title\n     * (as long as disableTypography is not `true`).\n     */\n    titleTypographyProps?: TypographyProps<\n      TitleTypographyComponent,\n      { component?: TitleTypographyComponent }\n    >;\n  };\n  defaultComponent: DefaultComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardHeader API](https://mui.com/material-ui/api/card-header/)\n */\ndeclare const CardHeader: OverridableCardHeader;\n\nexport interface OverridableCardHeader extends OverridableComponent<CardHeaderTypeMap> {\n  <\n    DefaultComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n    Props = {},\n    TitleTypographyComponent extends React.ElementType = 'span',\n    SubheaderTypographyComponent extends React.ElementType = 'span',\n  >(\n    props: CardHeaderPropsWithComponent<\n      DefaultComponent,\n      Props,\n      TitleTypographyComponent,\n      SubheaderTypographyComponent\n    >,\n  ): JSX.Element;\n}\n\nexport type CardHeaderProps<\n  DefaultComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n  Props = {},\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> = OverrideProps<\n  CardHeaderTypeMap<\n    Props,\n    DefaultComponent,\n    TitleTypographyComponent,\n    SubheaderTypographyComponent\n  >,\n  DefaultComponent\n>;\n\nexport type CardHeaderPropsWithComponent<\n  DefaultComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n  Props = {},\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> = {\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: DefaultComponent;\n} & CardHeaderProps<\n  DefaultComponent,\n  Props,\n  TitleTypographyComponent,\n  SubheaderTypographyComponent\n>;\n\nexport default CardHeader;\n",
  },
  {
    component: "CardMedia",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { CardMediaClasses } from './cardMediaClasses';\n\nexport interface CardMediaTypeMap<P, D extends React.ElementType> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<CardMediaClasses>;\n    /**\n     * Image to be displayed as a background image.\n     * Either `image` or `src` prop must be specified.\n     * Note that caller must specify height otherwise the image will not be visible.\n     */\n    image?: string;\n    /**\n     * An alias for `image` property.\n     * Available only with media components.\n     * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n     */\n    src?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardMedia API](https://mui.com/material-ui/api/card-media/)\n */\ndeclare const CardMedia: OverridableComponent<CardMediaTypeMap<{}, 'div'>>;\n\nexport type CardMediaProps<D extends React.ElementType = 'div', P = {}> = OverrideProps<\n  CardMediaTypeMap<P, D>,\n  D\n>;\n\nexport default CardMedia;\n",
  },
  {
    component: "Checkbox",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { CheckboxClasses } from './checkboxClasses';\n\nexport interface CheckboxPropsSizeOverrides {}\n\nexport interface CheckboxPropsColorOverrides {}\n\nexport interface CheckboxProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon' | 'type'> {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked?: SwitchBaseProps['checked'];\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CheckboxClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    CheckboxPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: SwitchBaseProps['disabled'];\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple?: SwitchBaseProps['disableRipple'];\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The id of the `input` element.\n   */\n  id?: SwitchBaseProps['id'];\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate?: boolean;\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon?: React.ReactNode;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: SwitchBaseProps['inputProps'];\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange?: SwitchBaseProps['onChange'];\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required?: SwitchBaseProps['required'];\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', CheckboxPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value?: SwitchBaseProps['value'];\n}\n\n/**\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [Checkbox API](https://mui.com/material-ui/api/checkbox/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\nexport default function Checkbox(props: CheckboxProps): JSX.Element;\n",
  },
  {
    component: "Chip",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ChipClasses } from './chipClasses';\n\nexport interface ChipPropsVariantOverrides {}\n\nexport interface ChipPropsSizeOverrides {}\n\nexport interface ChipPropsColorOverrides {}\n\nexport interface ChipTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The Avatar element to display.\n     */\n    avatar?: React.ReactElement;\n    /**\n     * This prop isn't supported.\n     * Use the `component` prop if you need to change the children structure.\n     */\n    children?: null;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ChipClasses>;\n    /**\n     * If `true`, the chip will appear clickable, and will raise when pressed,\n     * even if the onClick prop is not defined.\n     * If `false`, the chip will not appear clickable, even if onClick prop is defined.\n     * This can be used, for example,\n     * along with the component prop to indicate an anchor Chip is clickable.\n     * Note: this controls the UI and does not affect the onClick event.\n     */\n    clickable?: boolean;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'default'\n     */\n    color?: OverridableStringUnion<\n      'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n      ChipPropsColorOverrides\n    >;\n    /**\n     * Override the default delete icon element. Shown only if `onDelete` is set.\n     */\n    deleteIcon?: React.ReactElement;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Icon element.\n     */\n    icon?: React.ReactElement;\n    /**\n     * The content of the component.\n     */\n    label?: React.ReactNode;\n    /**\n     * Callback fired when the delete icon is clicked.\n     * If set, the delete icon will be shown.\n     */\n    onDelete?: React.EventHandler<any>;\n    /**\n     * The size of the component.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium', ChipPropsSizeOverrides>;\n    /**\n     * If `true`, allows the disabled chip to escape focus.\n     * If `false`, allows the disabled chip to receive focus.\n     * @default false\n     */\n    skipFocusWhenDisabled?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     *  @ignore\n     */\n    tabIndex?: number;\n    /**\n     * The variant to use.\n     * @default 'filled'\n     */\n    variant?: OverridableStringUnion<'filled' | 'outlined', ChipPropsVariantOverrides>;\n  };\n  defaultComponent: D;\n}\n\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n *\n * Demos:\n *\n * - [Chip](https://mui.com/material-ui/react-chip/)\n *\n * API:\n *\n * - [Chip API](https://mui.com/material-ui/api/chip/)\n */\ndeclare const Chip: OverridableComponent<ChipTypeMap>;\n\nexport type ChipProps<\n  D extends React.ElementType = ChipTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ChipTypeMap<P, D>, D>;\n\nexport default Chip;\n",
  },
  {
    component: "CircularProgress",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { CircularProgressClasses } from './circularProgressClasses';\n\nexport interface CircularProgressPropsColorOverrides {}\n\nexport interface CircularProgressProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CircularProgressClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'inherit',\n    CircularProgressPropsColorOverrides\n  >;\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink?: boolean;\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   * @default 40\n   */\n  size?: number | string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness?: number;\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant?: 'determinate' | 'indeterminate';\n}\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n *\n * Demos:\n *\n * - [Progress](https://mui.com/material-ui/react-progress/)\n *\n * API:\n *\n * - [CircularProgress API](https://mui.com/material-ui/api/circular-progress/)\n */\nexport default function CircularProgress(props: CircularProgressProps): JSX.Element;\n",
  },
  {
    component: "Collapse",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { CollapseClasses } from './collapseClasses';\n\nexport interface CollapseProps extends StandardProps<TransitionProps, 'timeout'> {\n  /**\n   * The content node to be collapsed.\n   */\n  children?: React.ReactNode;\n  className?: string;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CollapseClasses>;\n  /**\n   * The width (horizontal) or height (vertical) of the container when collapsed.\n   * @default '0px'\n   */\n  collapsedSize?: string | number;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType<TransitionProps>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  /**\n   * The transition orientation.\n   * @default 'vertical'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default duration.standard\n   */\n  timeout?: TransitionProps['timeout'] | 'auto';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](https://mui.com/material-ui/react-stepper/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Collapse API](https://mui.com/material-ui/api/collapse/)\n * - inherits [Transition API](http://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\n\nexport default function Collapse(props: CollapseProps): JSX.Element;\n",
  },
  {
    component: "Container",
    doc: "import * as React from 'react';\nimport { SxProps, Breakpoint } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ContainerClasses } from './containerClasses';\n\nexport interface ContainerTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ContainerClasses>;\n    /**\n     * If `true`, the left and right padding is removed.\n     * @default false\n     */\n    disableGutters?: boolean;\n    /**\n     * Set the max-width to match the min-width of the current breakpoint.\n     * This is useful if you'd prefer to design for a fixed set of sizes\n     * instead of trying to accommodate a fully fluid viewport.\n     * It's fluid by default.\n     * @default false\n     */\n    fixed?: boolean;\n    /**\n     * Determine the max-width of the container.\n     * The container width grows with the size of the screen.\n     * Set to `false` to disable `maxWidth`.\n     * @default 'lg'\n     */\n    maxWidth?: Breakpoint | false;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Container](https://mui.com/material-ui/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/material-ui/api/container/)\n */\ndeclare const Container: OverridableComponent<ContainerTypeMap>;\n\nexport type ContainerProps<\n  D extends React.ElementType = ContainerTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ContainerTypeMap<P, D>, D>;\n\nexport default Container;\n",
  },
  {
    component: "CssBaseline",
    doc: "import * as React from 'react';\nimport { StyledComponentProps } from '../styles';\n\nexport interface CssBaselineProps extends StyledComponentProps<never> {\n  /**\n   * You can wrap a node.\n   */\n  children?: React.ReactNode;\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme?: boolean;\n}\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n *\n * Demos:\n *\n * - [CSS Baseline](https://mui.com/material-ui/react-css-baseline/)\n *\n * API:\n *\n * - [CssBaseline API](https://mui.com/material-ui/api/css-baseline/)\n */\nexport default function CssBaseline(props: CssBaselineProps): JSX.Element;\n",
  },
  {
    component: "Dialog",
    doc: "import * as React from 'react';\nimport { SxProps, Breakpoint } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { ModalProps } from '../Modal';\nimport { TransitionProps } from '../transitions/transition';\nimport { DialogClasses } from './dialogClasses';\n\nexport interface DialogProps extends StandardProps<ModalProps, 'children'> {\n  /**\n   * The id(s) of the element(s) that describe the dialog.\n   */\n  'aria-describedby'?: string;\n  /**\n   * The id(s) of the element(s) that label the dialog.\n   */\n  'aria-labelledby'?: string;\n  /**\n   * Dialog children, usually the included sub-components.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogClasses>;\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown?: boolean;\n  /**\n   * If `true`, the dialog is full-screen.\n   * @default false\n   */\n  fullScreen?: boolean;\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.\n   *\n   * Notice that the dialog width grow is limited by the default margin.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Determine the max-width of the dialog.\n   * The dialog width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'sm'\n   */\n  maxWidth?: Breakpoint | false;\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick?: ModalProps['onBackdropClick'];\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: ModalProps['open'];\n  /**\n   * The component used to render the body of the dialog.\n   * @default Paper\n   */\n  PaperComponent?: React.JSXElementConstructor<PaperProps>;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps>;\n  /**\n   * Determine the container for scrolling the dialog.\n   * @default 'paper'\n   */\n  scroll?: 'body' | 'paper';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Fade\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n * Dialogs are overlaid modal paper based components with a backdrop.\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [Dialog API](https://mui.com/material-ui/api/dialog/)\n * - inherits [Modal API](https://mui.com/material-ui/api/modal/)\n */\nexport default function Dialog(props: DialogProps): JSX.Element;\n",
  },
  {
    component: "DialogActions",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { DialogActionsClasses } from './dialogActionsClasses';\n\nexport interface DialogActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogActionsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogActions API](https://mui.com/material-ui/api/dialog-actions/)\n */\nexport default function DialogActions(props: DialogActionsProps): JSX.Element;\n",
  },
  {
    component: "DialogContent",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { DialogContentClasses } from './dialogContentClasses';\n\nexport interface DialogContentProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogContentClasses>;\n  /**\n   * Display the top and bottom dividers.\n   * @default false\n   */\n  dividers?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogContent API](https://mui.com/material-ui/api/dialog-content/)\n */\nexport default function DialogContent(props: DialogContentProps): JSX.Element;\n",
  },
  {
    component: "DialogContentText",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { TypographyTypeMap } from '../Typography';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { DialogContentTextClasses } from './dialogContentTextClasses';\n\nexport interface DialogContentTextTypeMap<\n  P = {},\n  D extends React.ElementType = TypographyTypeMap['defaultComponent'],\n> {\n  props: P & {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DialogContentTextClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  } & Omit<TypographyTypeMap['props'], 'classes'>;\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogContentText API](https://mui.com/material-ui/api/dialog-content-text/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const DialogContentText: OverridableComponent<DialogContentTextTypeMap>;\n\nexport type DialogContentTextProps<\n  D extends React.ElementType = DialogContentTextTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<DialogContentTextTypeMap<P, D>, D>;\n\nexport default DialogContentText;\n",
  },
  {
    component: "DialogTitle",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { TypographyTypeMap } from '../Typography';\nimport { DialogTitleClasses } from './dialogTitleClasses';\n\nexport interface DialogTitleTypeMap<\n  P = {},\n  D extends React.ElementType = TypographyTypeMap['defaultComponent'],\n> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DialogTitleClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  } & Omit<TypographyTypeMap['props'], 'classes'>;\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogTitle API](https://mui.com/material-ui/api/dialog-title/)\n */\ndeclare const DialogTitle: OverridableComponent<DialogTitleTypeMap>;\n\nexport type DialogTitleProps<\n  D extends React.ElementType = DialogTitleTypeMap['defaultComponent'],\n  P = { component?: React.ElementType },\n> = OverrideProps<DialogTitleTypeMap<P, D>, D>;\n\nexport default DialogTitle;\n",
  },
  {
    component: "Divider",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { DividerClasses } from './dividerClasses';\n\nexport interface DividerPropsVariantOverrides {}\n\nexport interface DividerTypeMap<P = {}, D extends React.ElementType = 'hr'> {\n  props: P & {\n    /**\n     * Absolutely position the element.\n     * @default false\n     */\n    absolute?: boolean;\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DividerClasses>;\n    /**\n     * If `true`, a vertical divider will have the correct height when used in flex container.\n     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n     * @default false\n     */\n    flexItem?: boolean;\n    /**\n     * If `true`, the divider will have a lighter color.\n     * @default false\n     */\n    light?: boolean;\n    /**\n     * The component orientation.\n     * @default 'horizontal'\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The text alignment.\n     * @default 'center'\n     */\n    textAlign?: 'center' | 'right' | 'left';\n    /**\n     * The variant to use.\n     * @default 'fullWidth'\n     */\n    variant?: OverridableStringUnion<\n      'fullWidth' | 'inset' | 'middle',\n      DividerPropsVariantOverrides\n    >;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Divider](https://mui.com/material-ui/react-divider/)\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [Divider API](https://mui.com/material-ui/api/divider/)\n */\ndeclare const Divider: OverridableComponent<DividerTypeMap>;\n\nexport type DividerProps<\n  D extends React.ElementType = DividerTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<DividerTypeMap<P, D>, D>;\n\nexport default Divider;\n",
  },
  {
    component: "Drawer",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ModalProps } from '../Modal';\nimport { SlideProps } from '../Slide';\nimport { PaperProps } from '../Paper';\nimport { TransitionProps } from '../transitions/transition';\nimport { DrawerClasses } from './drawerClasses';\n\nexport interface DrawerProps extends StandardProps<ModalProps, 'open' | 'children'> {\n  /**\n   * Side from which the drawer will appear.\n   * @default 'left'\n   */\n  anchor?: 'left' | 'top' | 'right' | 'bottom';\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DrawerClasses>;\n  /**\n   * The elevation of the drawer.\n   * @default 16\n   */\n  elevation?: number;\n  /**\n   * Props applied to the [`Modal`](/material-ui/api/modal/) element.\n   * @default {}\n   */\n  ModalProps?: Partial<ModalProps>;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open?: boolean;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps>;\n  /**\n   * Props applied to the [`Slide`](/material-ui/api/slide/) element.\n   */\n  SlideProps?: Partial<SlideProps>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * The variant to use.\n   * @default 'temporary'\n   */\n  variant?: 'permanent' | 'persistent' | 'temporary';\n}\n\n/**\n * The props of the [Modal](https://mui.com/material-ui/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n *\n * Demos:\n *\n * - [Drawer](https://mui.com/material-ui/react-drawer/)\n *\n * API:\n *\n * - [Drawer API](https://mui.com/material-ui/api/drawer/)\n */\nexport default function Drawer(props: DrawerProps): JSX.Element;\n",
  },
  {
    component: "Fab",
    doc: "import { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { PropTypes, Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { FabClasses } from './fabClasses';\n\nexport interface FabPropsVariantOverrides {}\n\nexport interface FabPropsSizeOverrides {}\n\nexport interface FabPropsColorOverrides {}\n\nexport type FabTypeMap<P = {}, D extends React.ElementType = 'button'> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<FabClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'default'\n     */\n    color?: OverridableStringUnion<\n      PropTypes.Color | 'success' | 'error' | 'info' | 'warning',\n      FabPropsColorOverrides\n    >;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the  keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * If `true`, the ripple effect is disabled.\n     */\n    disableRipple?: boolean;\n    /**\n     * The URL to link to when the button is clicked.\n     * If defined, an `a` element will be used as the root node.\n     */\n    href?: string;\n    /**\n     * The size of the component.\n     * `small` is equivalent to the dense button styling.\n     * @default 'large'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', FabPropsSizeOverrides>;\n    /**\n     * The variant to use.\n     * @default 'circular'\n     */\n    variant?: OverridableStringUnion<'circular' | 'extended', FabPropsVariantOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Floating Action Button](https://mui.com/material-ui/react-floating-action-button/)\n *\n * API:\n *\n * - [Fab API](https://mui.com/material-ui/api/fab/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Fab: ExtendButtonBase<FabTypeMap>;\n\nexport type FabProps<\n  D extends React.ElementType = FabTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<FabTypeMap<P, D>, D>;\n\nexport default Fab;\n",
  },
  {
    component: "Fade",
    doc: "import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface FadeProps extends Omit<TransitionProps, 'children'> {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Fade transition is used by the [Modal](https://mui.com/material-ui/react-modal/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Fade API](https://mui.com/material-ui/api/fade/)\n * - inherits [Transition API](http://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Fade(props: FadeProps): JSX.Element;\n",
  },
  {
    component: "FilledInput",
    doc: "import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { FilledInputClasses } from './filledInputClasses';\n\nexport interface FilledInputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FilledInputClasses>;\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel?: boolean;\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FilledInput API](https://mui.com/material-ui/api/filled-input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const FilledInput: ((props: FilledInputProps) => JSX.Element) & { muiName: string };\n\nexport default FilledInput;\n",
  },
  {
    component: "FormControl",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { FormControlClasses } from './formControlClasses';\n\nexport interface FormControlPropsSizeOverrides {}\nexport interface FormControlPropsColorOverrides {}\n\nexport interface FormControlTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<FormControlClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'primary'\n     */\n    color?: OverridableStringUnion<\n      'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n      FormControlPropsColorOverrides\n    >;\n    /**\n     * If `true`, the label, input and helper text should be displayed in a disabled state.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the label is displayed in an error state.\n     * @default false\n     */\n    error?: boolean;\n    /**\n     * If `true`, the component will take up the full width of its container.\n     * @default false\n     */\n    fullWidth?: boolean;\n    /**\n     * If `true`, the component is displayed in focused state.\n     */\n    focused?: boolean;\n    /**\n     * If `true`, the label is hidden.\n     * This is used to increase density for a `FilledInput`.\n     * Be sure to add `aria-label` to the `input` element.\n     * @default false\n     */\n    hiddenLabel?: boolean;\n    /**\n     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n     * @default 'none'\n     */\n    margin?: 'dense' | 'normal' | 'none';\n    /**\n     * If `true`, the label will indicate that the `input` is required.\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * The size of the component.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium', FormControlPropsSizeOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * @default 'outlined'\n     */\n    variant?: 'standard' | 'outlined' | 'filled';\n  };\n  defaultComponent: D;\n}\n\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it creates visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormControl API](https://mui.com/material-ui/api/form-control/)\n */\ndeclare const FormControl: OverridableComponent<FormControlTypeMap>;\n\nexport type FormControlProps<\n  D extends React.ElementType = FormControlTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<FormControlTypeMap<P, D>, D>;\n\nexport default FormControl;\n",
  },
  {
    component: "FormControlLabel",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme, InternalStandardProps as StandardProps } from '..';\nimport { TypographyProps } from '../Typography';\nimport { FormControlLabelClasses } from './formControlLabelClasses';\n\nexport interface FormControlLabelProps\n  extends StandardProps<React.LabelHTMLAttributes<HTMLLabelElement>, 'children' | 'onChange'> {\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormControlLabelClasses>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    /**\n     * Props applied to the Typography wrapper of the passed label.\n     * This is unused if disableTypography is true.\n     * @default {}\n     */\n    typography?: TypographyProps;\n  };\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: React.ReactElement<any, any>;\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography?: boolean;\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: React.ReactNode;\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement?: 'end' | 'start' | 'top' | 'bottom';\n  name?: string;\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange?: (event: React.SyntheticEvent, checked: boolean) => void;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    /**\n     * Props applied to the Typography wrapper of the passed label.\n     * This is unused if disableTypography is true.\n     * @default {}\n     */\n    typography?: TypographyProps;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component.\n   */\n  value?: unknown;\n}\n\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormControlLabel API](https://mui.com/material-ui/api/form-control-label/)\n */\nexport default function FormControlLabel(props: FormControlLabelProps): JSX.Element;\n",
  },
  {
    component: "FormGroup",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { FormGroupClasses } from './formGroupClasses';\n\nexport interface FormGroupProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormGroupClasses>;\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormGroup API](https://mui.com/material-ui/api/form-group/)\n */\nexport default function FormGroup(props: FormGroupProps): JSX.Element;\n",
  },
  {
    component: "FormHelperText",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { FormHelperTextClasses } from './formHelperTextClasses';\n\nexport interface FormHelperTextPropsVariantOverrides {}\n\nexport interface FormHelperTextTypeMap<P = {}, D extends React.ElementType = 'p'> {\n  props: P & {\n    /**\n     * The content of the component.\n     *\n     * If `' '` is provided, the component reserves one line height for displaying a future message.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<FormHelperTextClasses>;\n    /**\n     * If `true`, the helper text should be displayed in a disabled state.\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, helper text should be displayed in an error state.\n     */\n    error?: boolean;\n    /**\n     * If `true`, the helper text should use filled classes key.\n     */\n    filled?: boolean;\n    /**\n     * If `true`, the helper text should use focused classes key.\n     */\n    focused?: boolean;\n    /**\n     * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n     * FormControl.\n     */\n    margin?: 'dense';\n    /**\n     * If `true`, the helper text should use required classes key.\n     */\n    required?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     */\n    variant?: OverridableStringUnion<\n      'standard' | 'outlined' | 'filled',\n      FormHelperTextPropsVariantOverrides\n    >;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormHelperText API](https://mui.com/material-ui/api/form-helper-text/)\n */\ndeclare const FormHelperText: OverridableComponent<FormHelperTextTypeMap>;\n\nexport type FormHelperTextProps<\n  D extends React.ElementType = FormHelperTextTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<FormHelperTextTypeMap<P, D>, D>;\n\nexport default FormHelperText;\n",
  },
  {
    component: "FormLabel",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps, OverridableTypeMap } from '../OverridableComponent';\nimport { FormLabelClasses } from './formLabelClasses';\n\nexport interface FormLabelPropsColorOverrides {}\n\nexport interface FormLabelOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormLabelClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    FormLabelPropsColorOverrides\n  >;\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled?: boolean;\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused?: boolean;\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface FormLabelTypeMap<P = {}, D extends React.ElementType = 'label'> {\n  props: P & FormLabelBaseProps & FormLabelOwnProps;\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormLabel API](https://mui.com/material-ui/api/form-label/)\n */\ndeclare const FormLabel: OverridableComponent<FormLabelTypeMap>;\n\nexport type FormLabelBaseProps = React.LabelHTMLAttributes<HTMLLabelElement>;\n\nexport interface ExtendFormLabelTypeMap<M extends OverridableTypeMap> {\n  props: M['props'] & Pick<FormLabelOwnProps, 'filled' | 'color'>;\n  defaultComponent: M['defaultComponent'];\n}\n\nexport type FormLabelProps<\n  D extends React.ElementType = FormLabelTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<FormLabelTypeMap<P, D>, D>;\n\nexport default FormLabel;\n",
  },
  {
    component: "Grid",
    doc: "import * as React from 'react';\nimport {\n  ResponsiveStyleValue,\n  SxProps,\n  SystemProps,\n  Breakpoint,\n  BreakpointOverrides,\n} from '@mui/system';\nimport { IfEquals } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { GridClasses } from './gridClasses';\n\nexport type GridDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';\n\nexport type GridSpacing = number | string;\n\nexport type GridWrap = 'nowrap' | 'wrap' | 'wrap-reverse';\n\nexport type GridSize = 'auto' | number;\n\nexport interface RegularBreakpoints {\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs?: boolean | GridSize;\n}\n\ntype CustomBreakpoints = Partial<Record<Breakpoint, boolean | GridSize>>;\n\ninterface BreakpointOverridesEmpty {}\n\ntype Breakpoints = IfEquals<\n  BreakpointOverrides,\n  BreakpointOverridesEmpty,\n  RegularBreakpoints,\n  CustomBreakpoints\n>;\n\nexport interface GridTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P &\n    SystemProps<Theme> & {\n      /**\n       * The content of the component.\n       */\n      children?: React.ReactNode;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<GridClasses>;\n      /**\n       * The number of columns.\n       * @default 12\n       */\n      columns?: ResponsiveStyleValue<number>;\n      /**\n       * Defines the horizontal space between the type `item` components.\n       * It overrides the value of the `spacing` prop.\n       */\n      columnSpacing?: ResponsiveStyleValue<GridSpacing>;\n      /**\n       * If `true`, the component will have the flex *container* behavior.\n       * You should be wrapping *items* with a *container*.\n       * @default false\n       */\n      container?: boolean;\n      /**\n       * Defines the `flex-direction` style property.\n       * It is applied for all screen sizes.\n       * @default 'row'\n       */\n      direction?: ResponsiveStyleValue<GridDirection>;\n      /**\n       * If `true`, the component will have the flex *item* behavior.\n       * You should be wrapping *items* with a *container*.\n       * @default false\n       */\n      item?: boolean;\n      /**\n       * Defines the vertical space between the type `item` components.\n       * It overrides the value of the `spacing` prop.\n       */\n      rowSpacing?: ResponsiveStyleValue<GridSpacing>;\n      /**\n       * Defines the space between the type `item` components.\n       * It can only be used on a type `container` component.\n       * @default 0\n       */\n      spacing?: ResponsiveStyleValue<GridSpacing>;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n      /**\n       * Defines the `flex-wrap` style property.\n       * It's applied for all screen sizes.\n       * @default 'wrap'\n       */\n      wrap?: GridWrap;\n      /**\n       * If `true`, it sets `min-width: 0` on the item.\n       * Refer to the limitations section of the documentation to better understand the use case.\n       * @default false\n       */\n      zeroMinWidth?: boolean;\n    } & Breakpoints;\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Grid](https://mui.com/material-ui/react-grid/)\n *\n * API:\n *\n * - [Grid API](https://mui.com/material-ui/api/grid/)\n */\ndeclare const Grid: OverridableComponent<GridTypeMap>;\n\nexport type GridProps<\n  D extends React.ElementType = GridTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<GridTypeMap<P, D>, D>;\n\nexport default Grid;\n",
  },
  {
    component: "Grow",
    doc: "import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface GrowProps extends Omit<TransitionProps, 'timeout'> {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  timeout?: TransitionProps['timeout'] | 'auto';\n}\n\n/**\n * The Grow transition is used by the [Tooltip](https://mui.com/material-ui/react-tooltip/) and\n * [Popover](https://mui.com/material-ui/react-popover/) components.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Popover](https://mui.com/material-ui/react-popover/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Grow API](https://mui.com/material-ui/api/grow/)\n * - inherits [Transition API](http://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Grow(props: GrowProps): JSX.Element;\n",
  },
  {
    component: "Hidden",
    doc: "import * as React from 'react';\nimport { Breakpoint } from '@mui/system';\n\nexport interface HiddenProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   * @default 'js'\n   */\n  implementation?: 'js' | 'css';\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth?: Breakpoint;\n  /**\n   * If `true`, screens this size and down are hidden.\n   * @default false\n   */\n  lgDown?: boolean;\n  /**\n   * If `true`, screens this size and up are hidden.\n   * @default false\n   */\n  lgUp?: boolean;\n  /**\n   * If `true`, screens this size and down are hidden.\n   * @default false\n   */\n  mdDown?: boolean;\n  /**\n   * If `true`, screens this size and up are hidden.\n   * @default false\n   */\n  mdUp?: boolean;\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only?: Breakpoint | Breakpoint[];\n  /**\n   * If `true`, screens this size and down are hidden.\n   * @default false\n   */\n  smDown?: boolean;\n  /**\n   * If `true`, screens this size and up are hidden.\n   * @default false\n   */\n  smUp?: boolean;\n  /**\n   * If `true`, screens this size and down are hidden.\n   * @default false\n   */\n  xlDown?: boolean;\n  /**\n   * If `true`, screens this size and up are hidden.\n   * @default false\n   */\n  xlUp?: boolean;\n  /**\n   * If `true`, screens this size and down are hidden.\n   * @default false\n   */\n  xsDown?: boolean;\n  /**\n   * If `true`, screens this size and up are hidden.\n   * @default false\n   */\n  xsUp?: boolean;\n}\n\n/**\n * Responsively hides children based on the selected implementation.\n *\n * Demos:\n *\n * - [Hidden](https://mui.com/material-ui/react-hidden/)\n *\n * API:\n *\n * - [Hidden API](https://mui.com/material-ui/api/hidden/)\n */\ndeclare const Hidden: React.JSXElementConstructor<HiddenProps>;\n\nexport default Hidden;\n",
  },
  {
    component: "Icon",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { IconClasses } from './iconClasses';\n\nexport interface IconPropsSizeOverrides {}\n\nexport interface IconPropsColorOverrides {}\n\nexport interface IconTypeMap<P = {}, D extends React.ElementType = 'span'> {\n  props: P & {\n    /**\n     * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any\n     * other base class that suits the icon font you're using (e.g. material-icons-rounded, fas, etc).\n     * @default 'material-icons'\n     */\n    baseClassName?: string;\n    /**\n     * The name of the icon font ligature.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<IconClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'inherit'\n     */\n    color?: OverridableStringUnion<\n      | 'inherit'\n      | 'action'\n      | 'disabled'\n      | 'primary'\n      | 'secondary'\n      | 'error'\n      | 'info'\n      | 'success'\n      | 'warning',\n      IconPropsColorOverrides\n    >;\n    /**\n     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n     * @default 'medium'\n     */\n    fontSize?: OverridableStringUnion<\n      'inherit' | 'large' | 'medium' | 'small',\n      IconPropsSizeOverrides\n    >;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Icons](https://mui.com/material-ui/icons/)\n * - [Material Icons](https://mui.com/material-ui/material-icons/)\n *\n * API:\n *\n * - [Icon API](https://mui.com/material-ui/api/icon/)\n */\ndeclare const Icon: OverridableComponent<IconTypeMap> & { muiName: string };\n\nexport type IconProps<\n  D extends React.ElementType = IconTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<IconTypeMap<P, D>, D>;\n\nexport default Icon;\n",
  },
  {
    component: "IconButton",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { IconButtonClasses } from './iconButtonClasses';\n\nexport interface IconButtonPropsColorOverrides {}\n\nexport interface IconButtonPropsSizeOverrides {}\n\nexport type IconButtonTypeMap<\n  P = {},\n  D extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * The icon to display.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<IconButtonClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'default'\n     */\n    color?: OverridableStringUnion<\n      'inherit' | 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n      IconButtonPropsColorOverrides\n    >;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the  keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * If given, uses a negative margin to counteract the padding on one\n     * side (this is often helpful for aligning the left or right\n     * side of the icon with content above or below, without ruining the border\n     * size and shape).\n     * @default false\n     */\n    edge?: 'start' | 'end' | false;\n    /**\n     * The size of the component.\n     * `small` is equivalent to the dense button styling.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', IconButtonPropsSizeOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n * Refer to the [Icons](https://mui.com/material-ui/icons/) section of the documentation\n * regarding the available icon options.\n *\n * Demos:\n *\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [IconButton API](https://mui.com/material-ui/api/icon-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const IconButton: ExtendButtonBase<IconButtonTypeMap>;\n\nexport type IconButtonProps<\n  D extends React.ElementType = IconButtonTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<IconButtonTypeMap<P, D>, D>;\n\nexport default IconButton;\n",
  },
  {
    component: "ImageList",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ImageListClasses } from './imageListClasses';\n\nexport interface ImageListPropsVariantOverrides {}\n\nexport interface ImageListTypeMap<P = {}, D extends React.ElementType = 'ul'> {\n  props: P & {\n    /**\n     * The content of the component, normally `ImageListItem`s.\n     */\n    children: NonNullable<React.ReactNode>;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ImageListClasses>;\n    /**\n     * Number of columns.\n     * @default 2\n     */\n    cols?: number;\n    /**\n     * The gap between items in px.\n     * @default 4\n     */\n    gap?: number;\n    /**\n     * The height of one row in px.\n     * @default 'auto'\n     */\n    rowHeight?: number | 'auto';\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * @default 'standard'\n     */\n    variant?: OverridableStringUnion<\n      'masonry' | 'quilted' | 'standard' | 'woven',\n      ImageListPropsVariantOverrides\n    >;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageList API](https://mui.com/material-ui/api/image-list/)\n */\ndeclare const ImageList: OverridableComponent<ImageListTypeMap>;\n\nexport type ImageListProps<\n  D extends React.ElementType = ImageListTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ImageListTypeMap<P, D>, D>;\n\nexport default ImageList;\n",
  },
  {
    component: "ImageListItem",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ImageListItemClasses } from './imageListItemClasses';\n\nexport interface ImageListItemTypeMap<P = {}, D extends React.ElementType = 'li'> {\n  props: P & {\n    /**\n     * The content of the component, normally an `<img>`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ImageListItemClasses>;\n    /**\n     * Width of the item in number of grid columns.\n     * @default 1\n     */\n    cols?: number;\n    /**\n     * Height of the item in number of grid rows.\n     * @default 1\n     */\n    rows?: number;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageListItem API](https://mui.com/material-ui/api/image-list-item/)\n */\ndeclare const ImageListItem: OverridableComponent<ImageListItemTypeMap>;\n\nexport type ImageListItemProps<\n  D extends React.ElementType = ImageListItemTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ImageListItemTypeMap<P, D>, D>;\n\nexport default ImageListItem;\n",
  },
  {
    component: "ImageListItemBar",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ImageListItemBarClasses } from './imageListItemBarClasses';\n\nexport interface ImageListItemBarProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the item itself).\n   */\n  actionIcon?: React.ReactNode;\n  /**\n   * Position of secondary action IconButton.\n   * @default 'right'\n   */\n  actionPosition?: 'left' | 'right';\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ImageListItemBarClasses>;\n  /**\n   * Position of the title bar.\n   * @default 'bottom'\n   */\n  position?: 'below' | 'top' | 'bottom';\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Title to be displayed.\n   */\n  title?: React.ReactNode;\n}\n\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageListItemBar API](https://mui.com/material-ui/api/image-list-item-bar/)\n */\nexport default function ImageListItemBar(props: ImageListItemBarProps): JSX.Element;\n",
  },
  {
    component: "Input",
    doc: "import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { InputClasses } from './inputClasses';\n\nexport interface InputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputClasses>;\n  /**\n   * If `true`, the `input` will not have an underline.\n   */\n  disableUnderline?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [Input API](https://mui.com/material-ui/api/input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const Input: ((props: InputProps) => JSX.Element) & { muiName: string };\n\nexport default Input;\n",
  },
  {
    component: "InputAdornment",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { InputAdornmentClasses } from './inputAdornmentClasses';\n\nexport interface InputAdornmentTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<InputAdornmentClasses>;\n    /**\n     * The content of the component, normally an `IconButton` or string.\n     */\n    children?: React.ReactNode;\n    /**\n     * Disable pointer events on the root.\n     * This allows for the content of the adornment to focus the `input` on click.\n     * @default false\n     */\n    disablePointerEvents?: boolean;\n    /**\n     * If children is a string then disable wrapping in a Typography component.\n     * @default false\n     */\n    disableTypography?: boolean;\n    /**\n     * The position this adornment should appear relative to the `Input`.\n     */\n    position: 'start' | 'end';\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * Note: If you are using the `TextField` component or the `FormControl` component\n     * you do not have to set this manually.\n     */\n    variant?: 'standard' | 'outlined' | 'filled';\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputAdornment API](https://mui.com/material-ui/api/input-adornment/)\n */\ndeclare const InputAdornment: OverridableComponent<InputAdornmentTypeMap>;\n\nexport type InputAdornmentProps<\n  D extends React.ElementType = InputAdornmentTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<InputAdornmentTypeMap<P, D>, D>;\n\nexport default InputAdornment;\n",
  },
  {
    component: "InputBase",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { InputBaseClasses } from './inputBaseClasses';\n\nexport interface InputBasePropsSizeOverrides {}\n\nexport interface InputBasePropsColorOverrides {}\n\nexport interface InputBaseComponentsPropsOverrides {}\n\nexport interface InputBaseProps\n  extends StandardProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    /*\n     * `onBlur`, `onChange`, `onFocus`, `onInvalid`, `onKeyDown`, `onKeyUp` are applied to the inner `InputComponent`,\n     * which by default is an input or textarea. Since these handlers differ from the\n     * ones inherited by `React.HTMLAttributes<HTMLDivElement>` we need to omit them.\n     */\n    | 'children'\n    | 'defaultValue'\n    | 'onBlur'\n    | 'onChange'\n    | 'onFocus'\n    | 'onInvalid'\n    | 'onKeyDown'\n    | 'onKeyUp'\n  > {\n  'aria-describedby'?: string;\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete?: string;\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputBaseClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    InputBasePropsColorOverrides\n  >;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n    Input?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides;\n    input?: React.InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides;\n  };\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: unknown;\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.\n   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.\n   * @default false\n   */\n  disableInjectingGlobalStyles?: boolean;\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment?: React.ReactNode;\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the `input` will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The id of the `input` element.\n   */\n  id?: string;\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a HTML element or a component.\n   * @default 'input'\n   */\n  inputComponent?: React.ElementType<InputBaseComponentProps>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * @default {}\n   */\n  inputProps?: InputBaseComponentProps;\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.\n   */\n  margin?: 'dense' | 'none';\n  /**\n   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.\n   * @default false\n   */\n  multiline?: boolean;\n  /**\n   * Name attribute of the `input` element.\n   */\n  name?: string;\n  /**\n   * Callback fired when the `input` is blurred.\n   *\n   * Notice that the first argument (event) might be undefined.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onFocus?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onKeyDown?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  /**\n   * Callback fired when the `input` doesn't satisfy its constraints.\n   */\n  onInvalid?: React.FormEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly?: boolean;\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required?: boolean;\n  renderSuffix?: (state: {\n    disabled?: boolean;\n    error?: boolean;\n    filled?: boolean;\n    focused?: boolean;\n    margin?: 'dense' | 'none' | 'normal';\n    required?: boolean;\n    startAdornment?: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows?: string | number;\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows?: string | number;\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows?: string | number;\n  /**\n   * The size of the component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', InputBasePropsSizeOverrides>;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides;\n    input?: React.InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n    input?: React.ElementType;\n  };\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type?: string;\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value?: unknown;\n}\n\nexport interface InputBaseComponentProps\n  extends React.HTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n  // Accommodate arbitrary additional props coming from the `inputProps` prop\n  [arbitrary: string]: any;\n}\n\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\nexport default function InputBase(props: InputBaseProps): JSX.Element;\n",
  },
  {
    component: "InputLabel",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { FormLabelProps, ExtendFormLabelTypeMap } from '../FormLabel';\nimport { Theme } from '../styles';\nimport { InputLabelClasses } from './inputLabelClasses';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\n\nexport interface InputLabelPropsSizeOverrides {}\n\nexport type InputLabelTypeMap<\n  P = {},\n  D extends React.ElementType = 'label',\n> = ExtendFormLabelTypeMap<{\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<InputLabelClasses>;\n    color?: FormLabelProps['color'];\n    /**\n     * If `true`, the transition animation is disabled.\n     * @default false\n     */\n    disableAnimation?: boolean;\n    /**\n     * If `true`, the component is disabled.\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the label is displayed in an error state.\n     */\n    error?: boolean;\n    /**\n     * If `true`, the `input` of this label is focused.\n     */\n    focused?: boolean;\n    /**\n     * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n     * FormControl.\n     */\n    margin?: 'dense';\n    /**\n     * if `true`, the label will indicate that the `input` is required.\n     */\n    required?: boolean;\n    /**\n     * If `true`, the label is shrunk.\n     */\n    shrink?: boolean;\n    /**\n     * The size of the component.\n     * @default 'normal'\n     */\n    size?: OverridableStringUnion<'small' | 'normal', InputLabelPropsSizeOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     */\n    variant?: 'standard' | 'outlined' | 'filled';\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputLabel API](https://mui.com/material-ui/api/input-label/)\n * - inherits [FormLabel API](https://mui.com/material-ui/api/form-label/)\n */\ndeclare const InputLabel: OverridableComponent<InputLabelTypeMap>;\n\nexport type InputLabelProps<\n  D extends React.ElementType = InputLabelTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<InputLabelTypeMap<P, D>, D>;\n\nexport default InputLabel;\n",
  },
  {
    component: "LinearProgress",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { LinearProgressClasses } from './linearProgressClasses';\n\nexport interface LinearProgressPropsColorOverrides {}\n\nexport interface LinearProgressProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<LinearProgressClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'inherit',\n    LinearProgressPropsColorOverrides\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value?: number;\n  /**\n   * The value for the buffer variant.\n   * Value between 0 and 100.\n   */\n  valueBuffer?: number;\n  /**\n   * The variant to use.\n   * Use indeterminate or query when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant?: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n}\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n *\n * Demos:\n *\n * - [Progress](https://mui.com/material-ui/react-progress/)\n *\n * API:\n *\n * - [LinearProgress API](https://mui.com/material-ui/api/linear-progress/)\n */\nexport default function LinearProgress(props: LinearProgressProps): JSX.Element;\n",
  },
  {
    component: "Link",
    doc: "import * as React from 'react';\nimport { DistributiveOmit } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { TypographyProps } from '../Typography';\nimport { LinkClasses } from './linkClasses';\n\nexport interface LinkTypeMap<P = {}, D extends React.ElementType = 'a'> {\n  props: P &\n    DistributiveOmit<LinkBaseProps, 'classes'> & {\n      /**\n       * The content of the component.\n       */\n      children?: React.ReactNode;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<LinkClasses>;\n      /**\n       * The color of the link.\n       * @default 'primary'\n       */\n      color?: TypographyProps['color'];\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n      /**\n       * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n       */\n      TypographyClasses?: TypographyProps['classes'];\n      /**\n       * Controls when the link should have an underline.\n       * @default 'always'\n       */\n      underline?: 'none' | 'hover' | 'always';\n      /**\n       * Applies the theme typography styles.\n       * @default 'inherit'\n       */\n      variant?: TypographyProps['variant'];\n    };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n * - [Links](https://mui.com/material-ui/react-link/)\n *\n * API:\n *\n * - [Link API](https://mui.com/material-ui/api/link/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const Link: OverridableComponent<LinkTypeMap>;\n\nexport type LinkBaseProps = Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'color'> &\n  DistributiveOmit<TypographyProps, 'children' | 'component' | 'color' | 'ref' | 'variant'>;\n\nexport type LinkProps<\n  D extends React.ElementType = LinkTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<LinkTypeMap<P, D>, D>;\n\nexport default Link;\n",
  },
  {
    component: "List",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverridableTypeMap, OverrideProps } from '../OverridableComponent';\nimport { ListClasses } from './listClasses';\n\nexport interface ListTypeMap<P = {}, D extends React.ElementType = 'ul'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ListClasses>;\n    /**\n     * If `true`, compact vertical padding designed for keyboard and mouse input is used for\n     * the list and list items.\n     * The prop is available to descendant components as the `dense` context.\n     * @default false\n     */\n    dense?: boolean;\n    /**\n     * If `true`, vertical padding is removed from the list.\n     * @default false\n     */\n    disablePadding?: boolean;\n    /**\n     * The content of the subheader, normally `ListSubheader`.\n     */\n    subheader?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n * utility to create component types that inherit props from List.\n */\nexport interface ExtendListTypeMap<M extends OverridableTypeMap> {\n  props: M['props'] & ListTypeMap['props'];\n  defaultComponent: M['defaultComponent'];\n}\n\nexport type ExtendList<M extends OverridableTypeMap> = OverridableComponent<ExtendListTypeMap<M>>;\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [List API](https://mui.com/material-ui/api/list/)\n */\ndeclare const List: ExtendList<ListTypeMap>;\n\nexport type ListProps<\n  D extends React.ElementType = ListTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ListTypeMap<P, D>, D>;\n\nexport default List;\n",
  },
  {
    component: "ListItem",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase } from '../ButtonBase';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ListItemClasses } from './listItemClasses';\n\nexport interface ListItemComponentsPropsOverrides {}\n\nexport interface ListItemBaseProps {\n  /**\n   * Defines the `align-items` style property.\n   * @default 'center'\n   */\n  alignItems?: 'flex-start' | 'center';\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  autoFocus?: boolean;\n  /**\n   * The content of the component if a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemClasses>;\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   * @default 'li'\n   * @deprecated\n   */\n  ContainerComponent?: React.ElementType<React.HTMLAttributes<HTMLDivElement>>;\n  /**\n   * Props applied to the container component if used.\n   * @default {}\n   * @deprecated\n   */\n  ContainerProps?: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent List component.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, all padding is removed.\n   * @default false\n   */\n  disablePadding?: boolean;\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   * @default false\n   */\n  divider?: boolean;\n  /**\n   * The element to display at the end of ListItem.\n   */\n  secondaryAction?: React.ReactNode;\n  /**\n   * Use to apply selected styling.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ListItemTypeMap<P, D extends React.ElementType> {\n  props: P &\n    ListItemBaseProps & {\n      /**\n       * The components used for each slot inside.\n       *\n       * This prop is an alias for the `slots` prop.\n       * It's recommended to use the `slots` prop instead.\n       *\n       * @default {}\n       */\n      components?: {\n        Root?: React.ElementType;\n      };\n      /**\n       * The extra props for the slot components.\n       * You can override the existing props or add new ones.\n       *\n       * This prop is an alias for the `slotProps` prop.\n       * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n       *\n       * @default {}\n       */\n      componentsProps?: {\n        root?: React.HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides;\n      };\n      /**\n       * The extra props for the slot components.\n       * You can override the existing props or add new ones.\n       *\n       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n       *\n       * @default {}\n       */\n      slotProps?: {\n        root?: React.HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides;\n      };\n      /**\n       * The components used for each slot inside.\n       *\n       * This prop is an alias for the `components` prop, which will be deprecated in the future.\n       *\n       * @default {}\n       */\n      slots?: {\n        root?: React.ElementType;\n      };\n    };\n  defaultComponent: D;\n}\n\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [ListItem API](https://mui.com/material-ui/api/list-item/)\n */\ndeclare const ListItem: ExtendButtonBase<\n  ListItemTypeMap<\n    {\n      /**\n       * If `true`, the list item is a button (using `ButtonBase`). Props intended\n       * for `ButtonBase` can then be applied to `ListItem`.\n       * @default false\n       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n       *\n       */\n      button: true;\n    },\n    'div'\n  >\n> &\n  OverridableComponent<\n    ListItemTypeMap<\n      {\n        /**\n         * If `true`, the list item is a button (using `ButtonBase`). Props intended\n         * for `ButtonBase` can then be applied to `ListItem`.\n         * @default false\n         * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n         */\n        button?: false;\n      },\n      'li'\n    >\n  >;\n\nexport type ListItemProps<D extends React.ElementType = 'li', P = {}> = OverrideProps<\n  ListItemTypeMap<P, D>,\n  D\n>;\n\nexport default ListItem;\n",
  },
  {
    component: "ListItemAvatar",
    doc: "import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemAvatarClasses } from './listItemAvatarClasses';\n\nexport interface ListItemAvatarProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemAvatarClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemAvatar API](https://mui.com/material-ui/api/list-item-avatar/)\n */\nexport default function ListItemAvatar(props: ListItemAvatarProps): JSX.Element;\n",
  },
  {
    component: "ListItemButton",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { ListItemButtonClasses } from './listItemButtonClasses';\n\nexport interface ListItemButtonBaseProps {\n  /**\n   * Defines the `align-items` style property.\n   * @default 'center'\n   */\n  alignItems?: 'flex-start' | 'center';\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * The content of the component if a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemButtonClasses>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent List component.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   * @default false\n   */\n  divider?: boolean;\n  /**\n   * Use to apply selected styling.\n   * @default false\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type ListItemButtonTypeMap<\n  P = {},\n  D extends React.ElementType = 'div',\n> = ExtendButtonBaseTypeMap<{\n  props: P & ListItemButtonBaseProps;\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemButton API](https://mui.com/material-ui/api/list-item-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ListItemButton: ExtendButtonBase<ListItemButtonTypeMap>;\n\nexport type ListItemButtonProps<\n  D extends React.ElementType = ListItemButtonTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ListItemButtonTypeMap<P, D>, D>;\n\nexport default ListItemButton;\n",
  },
  {
    component: "ListItemIcon",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemIconClasses } from './listItemIconClasses';\n\nexport interface ListItemIconProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@mui/icons-material` SVG icon element.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemIconClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemIcon API](https://mui.com/material-ui/api/list-item-icon/)\n */\nexport default function ListItemIcon(props: ListItemIconProps): JSX.Element;\n",
  },
  {
    component: "ListItemSecondaryAction",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemSecondaryActionClasses } from './listItemSecondaryActionClasses';\n\nexport interface ListItemSecondaryActionProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemSecondaryActionClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * Must be used as the last child of ListItem to function properly.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemSecondaryAction API](https://mui.com/material-ui/api/list-item-secondary-action/)\n */\ndeclare const ListItemSecondaryAction: ((props: ListItemSecondaryActionProps) => JSX.Element) & {\n  muiName: string;\n};\n\nexport default ListItemSecondaryAction;\n",
  },
  {
    component: "ListItemText",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TypographyProps } from '../Typography';\nimport { ListItemTextClasses } from './listItemTextClasses';\n\nexport interface ListItemTextProps<\n  PrimaryTypographyComponent extends React.ElementType = 'span',\n  SecondaryTypographyComponent extends React.ElementType = 'p',\n> extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * Alias for the `primary` prop.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemTextClasses>;\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography?: boolean;\n  /**\n   * If `true`, the children are indented.\n   * This should be used if there is no left avatar or left icon.\n   * @default false\n   */\n  inset?: boolean;\n  /**\n   * The main content element.\n   */\n  primary?: React.ReactNode;\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps?: TypographyProps<\n    PrimaryTypographyComponent,\n    { component?: PrimaryTypographyComponent }\n  >;\n  /**\n   * The secondary content element.\n   */\n  secondary?: React.ReactNode;\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps?: TypographyProps<\n    SecondaryTypographyComponent,\n    { component?: SecondaryTypographyComponent }\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemText API](https://mui.com/material-ui/api/list-item-text/)\n */\nexport default function ListItemText<\n  PrimaryTypographyComponent extends React.ElementType = 'span',\n  SecondaryTypographyComponent extends React.ElementType = 'p',\n>(props: ListItemTextProps<PrimaryTypographyComponent, SecondaryTypographyComponent>): JSX.Element;\n",
  },
  {
    component: "ListSubheader",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ListSubheaderClasses } from './listSubheaderClasses';\n\nexport interface ListSubheaderTypeMap<P = {}, D extends React.ElementType = 'li'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ListSubheaderClasses>;\n    /**\n     * The color of the component. It supports those theme colors that make sense for this component.\n     * @default 'default'\n     */\n    color?: 'default' | 'primary' | 'inherit';\n    /**\n     * If `true`, the List Subheader will not have gutters.\n     * @default false\n     */\n    disableGutters?: boolean;\n    /**\n     * If `true`, the List Subheader will not stick to the top during scroll.\n     * @default false\n     */\n    disableSticky?: boolean;\n    /**\n     * If `true`, the List Subheader is indented.\n     * @default false\n     */\n    inset?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListSubheader API](https://mui.com/material-ui/api/list-subheader/)\n */\ndeclare const ListSubheader: OverridableComponent<ListSubheaderTypeMap>;\n\nexport type ListSubheaderProps<\n  D extends React.ElementType = ListSubheaderTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ListSubheaderTypeMap<P, D>, D>;\n\nexport default ListSubheader;\n",
  },
  {
    component: "Menu",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { PopoverProps } from '../Popover';\nimport { MenuListProps } from '../MenuList';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { MenuClasses } from './menuClasses';\n\nexport interface MenuProps extends StandardProps<PopoverProps> {\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the menu.\n   */\n  anchorEl?: PopoverProps['anchorEl'];\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus?: boolean;\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<MenuClasses>;\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem?: boolean;\n  /**\n   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps?: Partial<MenuListProps>;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose?: PopoverProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.\n   */\n  PopoverClasses?: PopoverProps['classes'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.\n   * @default 'selectedMenu'\n   */\n  variant?: 'menu' | 'selectedMenu';\n}\n\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [Menu API](https://mui.com/material-ui/api/menu/)\n * - inherits [Popover API](https://mui.com/material-ui/api/popover/)\n */\nexport default function Menu(props: MenuProps): JSX.Element;\n",
  },
  {
    component: "MenuItem",
    doc: "import { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { MenuItemClasses } from './menuItemClasses';\n\nexport type MenuItemTypeMap<P = {}, D extends React.ElementType = 'li'> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * If `true`, the list item is focused during the first mount.\n     * Focus will also be triggered if the value changes from false to true.\n     * @default false\n     */\n    autoFocus?: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MenuItemClasses>;\n    /**\n     * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n     * The prop defaults to the value inherited from the parent Menu component.\n     * @default false\n     */\n    dense?: boolean;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the left and right padding is removed.\n     * @default false\n     */\n    disableGutters?: boolean;\n    /**\n     * If `true`, a 1px light border is added to the bottom of the menu item.\n     * @default false\n     */\n    divider?: boolean;\n    /**\n     * If `true`, the component is selected.\n     * @default false\n     */\n    selected?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/material-ui/api/menu-item/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const MenuItem: ExtendButtonBase<MenuItemTypeMap>;\n\nexport type MenuItemProps<\n  D extends React.ElementType = MenuItemTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<MenuItemTypeMap<P, D>, D>;\n\nexport default MenuItem;\n",
  },
  {
    component: "MenuList",
    doc: "import * as React from 'react';\nimport { ExtendList, ExtendListTypeMap } from '../List';\nimport { OverrideProps } from '../OverridableComponent';\n\nexport type MenuListTypeMap<P = {}, D extends React.ElementType = 'ul'> = ExtendListTypeMap<{\n  props: P & {\n    /**\n     * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n     * @default false\n     */\n    autoFocus?: boolean;\n    /**\n     * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n     * if `variant=\"selectedMenu\"`.\n     * @default false\n     */\n    autoFocusItem?: boolean;\n    /**\n     * MenuList contents, normally `MenuItem`s.\n     */\n    children?: React.ReactNode;\n    /**\n     * If `true`, will allow focus on disabled items.\n     * @default false\n     */\n    disabledItemsFocusable?: boolean;\n    /**\n     * If `true`, the menu items will not wrap focus.\n     * @default false\n     */\n    disableListWrap?: boolean;\n    /**\n     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n     * and the vertical alignment relative to the anchor element.\n     * @default 'selectedMenu'\n     */\n    variant?: 'menu' | 'selectedMenu';\n  };\n  defaultComponent: D;\n}>;\n\nexport type MenuListClassKey = keyof NonNullable<MenuListTypeMap['props']['classes']>;\n\n/**\n * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.\n * It's exposed to help customization of the [`Menu`](https://mui.com/material-ui/api/menu/) component if you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [MenuList API](https://mui.com/material-ui/api/menu-list/)\n * - inherits [List API](https://mui.com/material-ui/api/list/)\n */\ndeclare const MenuList: ExtendList<MenuListTypeMap>;\n\nexport type MenuListProps<\n  D extends React.ElementType = MenuListTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<MenuListTypeMap<P, D>, D>;\n\nexport default MenuList;\n",
  },
  {
    component: "MobileStepper",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { LinearProgressProps } from '../LinearProgress';\nimport { MobileStepperClasses } from './mobileStepperClasses';\n\nexport interface MobileStepperProps extends StandardProps<PaperProps, 'children' | 'variant'> {\n  /**\n   * Set the active step (zero based index).\n   * Defines which dot is highlighted when the variant is 'dots'.\n   * @default 0\n   */\n  activeStep?: number;\n  /**\n   * A back button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  backButton: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<MobileStepperClasses>;\n  /**\n   * Props applied to the `LinearProgress` element.\n   */\n  LinearProgressProps?: Partial<LinearProgressProps>;\n  /**\n   * A next button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  nextButton: React.ReactNode;\n  /**\n   * Set the positioning type.\n   * @default 'bottom'\n   */\n  position?: 'bottom' | 'top' | 'static';\n  /**\n   * The total steps.\n   */\n  steps: number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'dots'\n   */\n  variant?: 'text' | 'dots' | 'progress';\n}\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [MobileStepper API](https://mui.com/material-ui/api/mobile-stepper/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function MobileStepper(props: MobileStepperProps): JSX.Element;\n",
  },
  {
    component: "Modal",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverrideProps } from '@mui/types';\nimport { SlotComponentProps } from '@mui/base';\nimport { ModalUnstyledTypeMap, ModalUnstyledClasses } from '@mui/base/ModalUnstyled';\nimport { Theme } from '../styles';\nimport Backdrop, { BackdropProps } from '../Backdrop';\nimport { OverridableComponent } from '../OverridableComponent';\n\nexport interface ModalComponentsPropsOverrides {}\n\nexport interface ModalOwnerState extends ModalProps {\n  exited: boolean;\n}\n\nexport interface ModalTypeMap<D extends React.ElementType = 'div', P = {}> {\n  props: P & {\n    /**\n     * A backdrop component. This prop enables custom backdrop rendering.\n     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.\n     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.\n     * @default styled(Backdrop, {\n     *   name: 'MuiModal',\n     *   slot: 'Backdrop',\n     *   overridesResolver: (props, styles) => {\n     *     return styles.backdrop;\n     *   },\n     * })({\n     *   zIndex: -1,\n     * })\n     */\n    BackdropComponent?: React.ElementType<BackdropProps>;\n    /**\n     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.\n     * @deprecated Use `slotProps.backdrop` instead.\n     */\n    BackdropProps?: Partial<BackdropProps>;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ModalUnstyledClasses>;\n    /**\n     * @ignore\n     */\n    className?: string;\n    /**\n     * The components used for each slot inside.\n     *\n     * This prop is an alias for the `slots` prop.\n     * It's recommended to use the `slots` prop instead.\n     *\n     * @default {}\n     */\n    components?: {\n      Root?: React.ElementType;\n      Backdrop?: React.ElementType;\n    };\n    /**\n     * The extra props for the slot components.\n     * You can override the existing props or add new ones.\n     *\n     * This prop is an alias for the `slotProps` prop.\n     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n     *\n     * @default {}\n     */\n    componentsProps?: {\n      root?: SlotComponentProps<'div', ModalComponentsPropsOverrides, ModalOwnerState>;\n      backdrop?: SlotComponentProps<\n        typeof Backdrop,\n        ModalComponentsPropsOverrides,\n        ModalOwnerState\n      >;\n    };\n    /**\n     * The props used for each slot inside the Modal.\n     * @default {}\n     */\n    slotProps?: {\n      root?: SlotComponentProps<'div', ModalComponentsPropsOverrides, ModalOwnerState>;\n      backdrop?: SlotComponentProps<\n        typeof Backdrop,\n        ModalComponentsPropsOverrides,\n        ModalOwnerState\n      >;\n    };\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  } & Omit<ModalUnstyledTypeMap['props'], 'slotProps'>;\n  defaultComponent: D;\n}\n\ntype ModalRootProps = NonNullable<ModalTypeMap['props']['slotProps']>['root'];\n\nexport declare const ModalRoot: React.FC<ModalRootProps>;\n\nexport type ModalClassKey = keyof NonNullable<ModalProps['classes']>;\n\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * *   [Dialog](https://mui.com/material-ui/api/dialog/)\n * *   [Drawer](https://mui.com/material-ui/api/drawer/)\n * *   [Menu](https://mui.com/material-ui/api/menu/)\n * *   [Popover](https://mui.com/material-ui/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n *\n * Demos:\n *\n * - [Modal](https://mui.com/material-ui/react-modal/)\n *\n * API:\n *\n * - [Modal API](https://mui.com/material-ui/api/modal/)\n */\ndeclare const Modal: OverridableComponent<ModalTypeMap>;\n\nexport type ModalClasses = Record<ModalClassKey, string>;\n\nexport declare const modalClasses: ModalClasses;\n\nexport type ModalProps<\n  D extends React.ElementType = ModalTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ModalTypeMap<D, P>, D>;\n\nexport default Modal;\n",
  },
  {
    component: "NativeSelect",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputProps } from '../Input';\nimport { NativeSelectInputProps } from './NativeSelectInput';\nimport { NativeSelectClasses } from './nativeSelectClasses';\n\nexport interface NativeSelectProps\n  extends StandardProps<InputProps, 'inputProps' | 'value' | 'onChange'> {\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes?: Partial<NativeSelectClasses>;\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent?: React.ElementType;\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input?: React.ReactElement<any, any>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps?: Partial<NativeSelectInputProps>;\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: NativeSelectInputProps['onChange'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value?: unknown;\n  /**\n   * The variant to use.\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n *\n * Demos:\n *\n * - [Select](https://mui.com/material-ui/react-select/)\n *\n * API:\n *\n * - [NativeSelect API](https://mui.com/material-ui/api/native-select/)\n * - inherits [Input API](https://mui.com/material-ui/api/input/)\n */\ndeclare const NativeSelect: ((props: NativeSelectProps) => JSX.Element) & { muiName: string };\n\nexport default NativeSelect;\n",
  },
  {
    component: "OutlinedInput",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { OutlinedInputClasses } from './outlinedInputClasses';\n\nexport interface OutlinedInputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<OutlinedInputClasses>;\n  /**\n   * The label of the `input`. It is only used for layout. The actual labelling\n   * is handled by `InputLabel`.\n   */\n  label?: React.ReactNode;\n  /**\n   * If `true`, the outline is notched to accommodate the label.\n   */\n  notched?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [OutlinedInput API](https://mui.com/material-ui/api/outlined-input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const OutlinedInput: ((props: OutlinedInputProps) => JSX.Element) & { muiName: string };\n\nexport default OutlinedInput;\n",
  },
  {
    component: "Pagination",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '@mui/material';\nimport { Theme } from '../styles';\nimport { UsePaginationItem, UsePaginationProps } from '../usePagination/usePagination';\nimport { PaginationClasses } from './paginationClasses';\n\nexport interface PaginationRenderItemParams extends UsePaginationItem {\n  color: PaginationProps['color'];\n  shape: PaginationProps['shape'];\n  size: PaginationProps['size'];\n  variant: PaginationProps['variant'];\n}\n\nexport interface PaginationPropsVariantOverrides {}\n\nexport interface PaginationPropsSizeOverrides {}\n\nexport interface PaginationPropsColorOverrides {}\n\nexport interface PaginationProps\n  extends UsePaginationProps,\n    StandardProps<React.HTMLAttributes<HTMLElement>, 'children' | 'onChange'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PaginationClasses>;\n  /**\n   * The active color.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'standard',\n    PaginationPropsColorOverrides\n  >;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.\n   * @param {number} page The page number to format.\n   * @param {bool} selected If true, the current page is selected.\n   * @returns {string}\n   */\n  getItemAriaLabel?: (\n    type: 'page' | 'first' | 'last' | 'next' | 'previous',\n    page: number,\n    selected: boolean,\n  ) => string;\n  /**\n   * Render the item.\n   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.\n   * @returns {ReactNode}\n   * @default (item) => <PaginationItem {...item} />\n   */\n  renderItem?: (params: PaginationRenderItemParams) => React.ReactNode;\n  /**\n   * The shape of the pagination items.\n   * @default 'circular'\n   */\n  shape?: 'circular' | 'rounded';\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', PaginationPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant?: OverridableStringUnion<'text' | 'outlined', PaginationPropsVariantOverrides>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Pagination](https://mui.com/material-ui/react-pagination/)\n *\n * API:\n *\n * - [Pagination API](https://mui.com/material-ui/api/pagination/)\n */\nexport default function Pagination(props: PaginationProps): JSX.Element;\n",
  },
  {
    component: "PaginationItem",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { UsePaginationItem } from '../usePagination/usePagination';\nimport { PaginationItemClasses } from './paginationItemClasses';\n\nexport interface PaginationItemPropsVariantOverrides {}\n\nexport interface PaginationItemPropsSizeOverrides {}\n\nexport interface PaginationItemPropsColorOverrides {}\n\nexport interface PaginationItemTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PaginationItemClasses>;\n    /**\n     * The active color.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'standard'\n     */\n    color?: OverridableStringUnion<\n      'standard' | 'primary' | 'secondary',\n      PaginationItemPropsColorOverrides\n    >;\n    /**\n     * The components used for each slot inside.\n     *\n     * This prop is an alias for the `slots` prop.\n     * It's recommended to use the `slots` prop instead.\n     *\n     * @default {}\n     */\n    components?: {\n      first?: React.ElementType;\n      last?: React.ElementType;\n      next?: React.ElementType;\n      previous?: React.ElementType;\n    };\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * The current page number.\n     */\n    page?: React.ReactNode;\n    /**\n     * If `true` the pagination item is selected.\n     * @default false\n     */\n    selected?: boolean;\n    /**\n     * The shape of the pagination item.\n     * @default 'circular'\n     */\n    shape?: 'circular' | 'rounded';\n    /**\n     * The size of the component.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', PaginationItemPropsSizeOverrides>;\n    /**\n     * The components used for each slot inside.\n     *\n     * This prop is an alias for the `components` prop, which will be deprecated in the future.\n     *\n     * @default {}\n     */\n    slots?: {\n      first?: React.ElementType;\n      last?: React.ElementType;\n      next?: React.ElementType;\n      previous?: React.ElementType;\n    };\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The type of pagination item.\n     * @default 'page'\n     */\n    type?: UsePaginationItem['type'];\n    /**\n     * The variant to use.\n     * @default 'text'\n     */\n    variant?: OverridableStringUnion<'text' | 'outlined', PaginationItemPropsVariantOverrides>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Pagination](https://mui.com/material-ui/react-pagination/)\n *\n * API:\n *\n * - [PaginationItem API](https://mui.com/material-ui/api/pagination-item/)\n */\ndeclare const PaginationItem: OverridableComponent<PaginationItemTypeMap>;\n\nexport type PaginationItemProps<\n  D extends React.ElementType = PaginationItemTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<PaginationItemTypeMap<P, D>, D>;\n\nexport default PaginationItem;\n",
  },
  {
    component: "Paper",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { PaperClasses } from './paperClasses';\n\nexport interface PaperPropsVariantOverrides {}\n\nexport interface PaperTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PaperClasses>;\n    /**\n     * Shadow depth, corresponds to `dp` in the spec.\n     * It accepts values between 0 and 24 inclusive.\n     * @default 1\n     */\n    elevation?: number;\n    /**\n     * If `true`, rounded corners are disabled.\n     * @default false\n     */\n    square?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The variant to use.\n     * @default 'elevation'\n     */\n    variant?: OverridableStringUnion<'elevation' | 'outlined', PaperPropsVariantOverrides>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n * - [Paper](https://mui.com/material-ui/react-paper/)\n *\n * API:\n *\n * - [Paper API](https://mui.com/material-ui/api/paper/)\n */\ndeclare const Paper: OverridableComponent<PaperTypeMap>;\n\nexport type PaperProps<\n  D extends React.ElementType = PaperTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<PaperTypeMap<P, D>, D>;\n\nexport default Paper;\n",
  },
  {
    component: "Popover",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { PaperProps } from '../Paper';\nimport { ModalProps } from '../Modal';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { PopoverClasses } from './popoverClasses';\n\nexport interface PopoverOrigin {\n  vertical: 'top' | 'center' | 'bottom' | number;\n  horizontal: 'left' | 'center' | 'right' | number;\n}\n\nexport interface PopoverPosition {\n  top: number;\n  left: number;\n}\n\nexport type PopoverReference = 'anchorEl' | 'anchorPosition' | 'none';\n\nexport interface PopoverProps extends StandardProps<ModalProps, 'children'> {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports updatePosition() action.\n   */\n  action?: React.Ref<PopoverActions>;\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the popover.\n   */\n  anchorEl?: null | Element | ((element: Element) => Element);\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  anchorOrigin?: PopoverOrigin;\n  /**\n   * This is the position that may be used to set the position of the popover.\n   * The coordinates are relative to the application's client area.\n   */\n  anchorPosition?: PopoverPosition;\n  /**\n   * This determines which anchor prop to refer to when setting\n   * the position of the popover.\n   * @default 'anchorEl'\n   */\n  anchorReference?: PopoverReference;\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PopoverClasses>;\n  /**\n   * An HTML element, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   *\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: ModalProps['container'];\n  /**\n   * The elevation of the popover.\n   * @default 8\n   */\n  elevation?: number;\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   * @default 16\n   */\n  marginThreshold?: number;\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  transformOrigin?: PopoverOrigin;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n}\n\nexport interface PopoverActions {\n  updatePosition(): void;\n}\n\nexport function getOffsetTop(rect: DOMRect, vertical: number | 'center' | 'bottom' | 'top'): number;\n\nexport function getOffsetLeft(\n  rect: DOMRect,\n  horizontal: number | 'center' | 'right' | 'left',\n): number;\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n * - [Popover](https://mui.com/material-ui/react-popover/)\n *\n * API:\n *\n * - [Popover API](https://mui.com/material-ui/api/popover/)\n * - inherits [Modal API](https://mui.com/material-ui/api/modal/)\n */\nexport default function Popover(props: PopoverProps): JSX.Element;\n",
  },
  {
    component: "Popper",
    doc: "import { PopperUnstyledProps } from '@mui/base/PopperUnstyled';\nimport { SxProps } from '@mui/system';\nimport * as React from 'react';\nimport { Theme } from '../styles';\nexport type PopperProps = Omit<PopperUnstyledProps, 'direction'> & {\n    /**\n     * The components used for each slot inside the Popper.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    components?: {\n        Root?: React.ElementType;\n    };\n    /**\n     * The props used for each slot inside the Popper.\n     * @default {}\n     */\n    componentsProps?: PopperUnstyledProps['slotProps'];\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n};\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n * - [Menu](https://mui.com/material-ui/react-menu/)\n * - [Popper](https://mui.com/material-ui/react-popper/)\n *\n * API:\n *\n * - [Popper API](https://mui.com/material-ui/api/popper/)\n */\ndeclare const Popper: React.ForwardRefExoticComponent<Omit<PopperUnstyledProps<\"div\", {}>, \"direction\"> & {\n    /**\n     * The components used for each slot inside the Popper.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    components?: {\n        Root?: React.ElementType<any> | undefined;\n    } | undefined;\n    /**\n     * The props used for each slot inside the Popper.\n     * @default {}\n     */\n    componentsProps?: PopperUnstyledProps['slotProps'];\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport default Popper;\n",
  },
  {
    component: "Radio",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { RadioClasses } from './radioClasses';\n\nexport interface RadioPropsSizeOverrides {}\n\nexport interface RadioPropsColorOverrides {}\n\nexport interface RadioProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon' | 'type'> {\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<RadioClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    RadioPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', RadioPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n *\n * API:\n *\n * - [Radio API](https://mui.com/material-ui/api/radio/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\nexport default function Radio(props: RadioProps): JSX.Element;\n",
  },
  {
    component: "RadioGroup",
    doc: "import * as React from 'react';\nimport { FormGroupProps } from '../FormGroup';\n\nexport interface RadioGroupProps extends Omit<FormGroupProps, 'onChange'> {\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: any;\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name?: string;\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value?: any;\n}\n\nexport type RadioGroupClassKey = keyof NonNullable<RadioGroupProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n *\n * API:\n *\n * - [RadioGroup API](https://mui.com/material-ui/api/radio-group/)\n * - inherits [FormGroup API](https://mui.com/material-ui/api/form-group/)\n */\nexport default function RadioGroup(props: RadioGroupProps): JSX.Element;\n",
  },
  {
    component: "Rating",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { RatingClasses } from './ratingClasses';\n\nexport interface IconContainerProps extends React.HTMLAttributes<HTMLSpanElement> {\n  value: number;\n}\n\nexport interface RatingPropsSizeOverrides {}\n\nexport interface RatingProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children' | 'onChange'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<RatingClasses>;\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default null\n   */\n  defaultValue?: number;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when empty.\n   * @default <StarBorder fontSize=\"inherit\" />\n   */\n  emptyIcon?: React.ReactNode;\n  /**\n   * The label read when the rating input is empty.\n   * @default 'Empty'\n   */\n  emptyLabelText?: React.ReactNode;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {number} value The rating label's value to format.\n   * @returns {string}\n   * @default function defaultLabelText(value) {\n   *   return `${value} Star${value !== 1 ? 's' : ''}`;\n   * }\n   */\n  getLabelText?: (value: number) => string;\n  /**\n   * If `true`, only the selected icon will be highlighted.\n   * @default false\n   */\n  highlightSelectedOnly?: boolean;\n  /**\n   * The icon to display.\n   * @default <Star fontSize=\"inherit\" />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The component containing the icon.\n   * @default function IconContainer(props) {\n   *   const { value, ...other } = props;\n   *   return <span {...other} />;\n   * }\n   */\n  IconContainerComponent?: React.ElementType<IconContainerProps>;\n  /**\n   * Maximum rating.\n   * @default 5\n   */\n  max?: number;\n  /**\n   * The name attribute of the radio `input` elements.\n   * This input `name` should be unique within the page.\n   * Being unique within a form is insufficient since the `name` is used to generated IDs.\n   */\n  name?: string;\n  /**\n   * Callback fired when the value changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number|null} value The new value.\n   */\n  onChange?: (event: React.SyntheticEvent, value: number | null) => void;\n  /**\n   * Callback function that is fired when the hover state changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number} value The new value.\n   */\n  onChangeActive?: (event: React.SyntheticEvent, value: number) => void;\n  /**\n   * The minimum increment value change allowed.\n   * @default 1\n   */\n  precision?: number;\n  /**\n   * Removes all hover effects and pointer events.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', RatingPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The rating value.\n   */\n  value?: number | null;\n}\n\n/**\n *\n * Demos:\n *\n * - [Rating](https://mui.com/material-ui/react-rating/)\n *\n * API:\n *\n * - [Rating API](https://mui.com/material-ui/api/rating/)\n */\nexport default function Rating(props: RatingProps): JSX.Element;\n",
  },
  {
    component: "ScopedCssBaseline",
    doc: "import { SxProps } from '@mui/system';\nimport * as React from 'react';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ScopedCssBaselineClasses } from './scopedCssBaselineClasses';\n\nexport interface ScopedCssBaselineTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ScopedCssBaselineClasses>;\n    /**\n     * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n     * For browser support, check out https://caniuse.com/?search=color-scheme\n     */\n    enableColorScheme?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [CSS Baseline](https://mui.com/material-ui/react-css-baseline/)\n *\n * API:\n *\n * - [ScopedCssBaseline API](https://mui.com/material-ui/api/scoped-css-baseline/)\n */\ndeclare const ScopedCssBaseline: OverridableComponent<ScopedCssBaselineTypeMap>;\n\nexport type ScopedCssBaselineProps<\n  D extends React.ElementType = ScopedCssBaselineTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ScopedCssBaselineTypeMap<P, D>, D>;\n\n/**\n *\n * Demos:\n *\n * - [Css Baseline](https://mui.com/components/css-baseline/)\n *\n * API:\n *\n * - [ScopedCssBaseline API](https://mui.com/api/scoped-css-baseline/)\n */\nexport default ScopedCssBaseline;\n",
  },
  {
    component: "Select",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputProps } from '../Input';\nimport { MenuProps } from '../Menu';\nimport { SelectChangeEvent, SelectInputProps } from './SelectInput';\nimport { SelectClasses } from './selectClasses';\nimport { OutlinedInputProps } from '../OutlinedInput';\n\nexport { SelectChangeEvent };\n\nexport interface SelectProps<T = unknown>\n  extends StandardProps<InputProps, 'value' | 'onChange'>,\n    Omit<OutlinedInputProps, 'value' | 'onChange'>,\n    Pick<SelectInputProps<T>, 'onChange'> {\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth?: boolean;\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes?: Partial<SelectClasses>;\n  /**\n   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).\n   * You can only use it when the `native` prop is `false` (default).\n   * @default false\n   */\n  defaultOpen?: boolean;\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: T;\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty?: boolean;\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent?: React.ElementType;\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id?: string;\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input?: React.ReactElement<any, any>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps?: InputProps['inputProps'];\n  /**\n   * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)\n   */\n  label?: React.ReactNode;\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId?: string;\n  /**\n   * Props applied to the [`Menu`](/material-ui/api/menu/) element.\n   */\n  MenuProps?: Partial<MenuProps>;\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple?: boolean;\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native?: boolean;\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange?: SelectInputProps<T>['onChange'];\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapes).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent) => void;\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen?: (event: React.SyntheticEvent) => void;\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open?: boolean;\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue?: (value: T) => React.ReactNode;\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps?: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value?: T | '';\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/material-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/material-ui/api/select/)\n * - inherits [OutlinedInput API](https://mui.com/material-ui/api/outlined-input/)\n */\ndeclare const Select: (<T>(props: SelectProps<T>) => JSX.Element) & {\n  muiName: string;\n};\n\nexport default Select;\n",
  },
  {
    component: "Skeleton",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { SkeletonClasses } from './skeletonClasses';\n\nexport interface SkeletonPropsVariantOverrides {}\n\nexport interface SkeletonTypeMap<P = {}, D extends React.ElementType = 'span'> {\n  props: P & {\n    /**\n     * The animation.\n     * If `false` the animation effect is disabled.\n     * @default 'pulse'\n     */\n    animation?: 'pulse' | 'wave' | false;\n    /**\n     * Optional children to infer width and height from.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<SkeletonClasses>;\n    /**\n     * Height of the skeleton.\n     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n     */\n    height?: number | string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The type of content that will be rendered.\n     * @default 'text'\n     */\n    variant?: OverridableStringUnion<\n      'text' | 'rectangular' | 'rounded' | 'circular',\n      SkeletonPropsVariantOverrides\n    >;\n    /**\n     * Width of the skeleton.\n     * Useful when the skeleton is inside an inline element with no width of its own.\n     */\n    width?: number | string;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Skeleton](https://mui.com/material-ui/react-skeleton/)\n *\n * API:\n *\n * - [Skeleton API](https://mui.com/material-ui/api/skeleton/)\n */\ndeclare const Skeleton: OverridableComponent<SkeletonTypeMap>;\n\nexport type SkeletonProps<\n  D extends React.ElementType = SkeletonTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<SkeletonTypeMap<P, D>, D>;\n\nexport default Skeleton;\n",
  },
  {
    component: "Slide",
    doc: "import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface SlideProps extends TransitionProps {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the container the Slide is transitioning from.\n   */\n  container?: null | Element | ((element: Element) => Element);\n  /**\n   * Direction the child node will enter from.\n   * @default 'down'\n   */\n  direction?: 'left' | 'right' | 'up' | 'down';\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   * @default {\n   *   enter: theme.transitions.easing.easeOut,\n   *   exit: theme.transitions.easing.sharp,\n   * }\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: TransitionProps['in'];\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Slide transition is used by the [Drawer](https://mui.com/material-ui/react-drawer/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Slide API](https://mui.com/material-ui/api/slide/)\n * - inherits [Transition API](http://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Slide(props: SlideProps): JSX.Element;\n",
  },
  {
    component: "Slider",
    doc: "import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base';\nimport { Mark } from '@mui/base/useSlider';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport SliderValueLabelComponent from './SliderValueLabel';\nimport { SliderClasses } from './sliderClasses';\n\nexport interface SliderPropsColorOverrides {}\n\nexport interface SliderPropsSizeOverrides {}\n\nexport interface SliderComponentsPropsOverrides {}\n\nexport interface SliderOwnerState extends SliderProps {\n  dragging: boolean;\n  marked: boolean;\n  focusedThumbIndex: number;\n}\n\nexport interface SliderTypeMap<D extends React.ElementType = 'span', P = {}> {\n  props: P & {\n    /**\n     * The label of the slider.\n     */\n    'aria-label'?: string;\n    /**\n     * The id of the element containing a label for the slider.\n     */\n    'aria-labelledby'?: string;\n    /**\n     * A string value that provides a user-friendly name for the current value of the slider.\n     */\n    'aria-valuetext'?: string;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'primary'\n     */\n    color?: OverridableStringUnion<'primary' | 'secondary', SliderPropsColorOverrides>;\n    /**\n     * The components used for each slot inside.\n     *\n     * This prop is an alias for the `slots` prop.\n     * It's recommended to use the `slots` prop instead.\n     *\n     * @default {}\n     */\n    components?: {\n      Root?: React.ElementType;\n      Track?: React.ElementType;\n      Rail?: React.ElementType;\n      Thumb?: React.ElementType;\n      Mark?: React.ElementType;\n      MarkLabel?: React.ElementType;\n      ValueLabel?: React.ElementType;\n      Input?: React.ElementType;\n    };\n    /**\n     * The extra props for the slot components.\n     * You can override the existing props or add new ones.\n     *\n     * This prop is an alias for the `slotProps` prop.\n     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n     *\n     * @default {}\n     */\n    componentsProps?: {\n      root?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      track?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      rail?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      thumb?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      mark?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      markLabel?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      valueLabel?: SlotComponentProps<\n        typeof SliderValueLabelComponent,\n        SliderComponentsPropsOverrides,\n        SliderOwnerState\n      >;\n      input?: SlotComponentProps<'input', SliderComponentsPropsOverrides, SliderOwnerState>;\n    };\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<SliderClasses>;\n    /**\n     * @ignore\n     */\n    className?: string;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: number | number[];\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n     * @default false\n     */\n    disableSwap?: boolean;\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n     * This is important for screen reader users.\n     * @param {number} index The thumb label's index to format.\n     * @returns {string}\n     */\n    getAriaLabel?: (index: number) => string;\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n     * This is important for screen reader users.\n     * @param {number} value The thumb label's value to format.\n     * @param {number} index The thumb label's index to format.\n     * @returns {string}\n     */\n    getAriaValueText?: (value: number, index: number) => string;\n    /**\n     * Marks indicate predetermined values to which the user can move the slider.\n     * If `true` the marks are spaced according the value of the `step` prop.\n     * If an array, it should contain objects with `value` and an optional `label` keys.\n     * @default false\n     */\n    marks?: boolean | Mark[];\n    /**\n     * The maximum allowed value of the slider.\n     * Should not be equal to min.\n     * @default 100\n     */\n    max?: number;\n    /**\n     * The minimum allowed value of the slider.\n     * Should not be equal to max.\n     * @default 0\n     */\n    min?: number;\n    /**\n     * Name attribute of the hidden `input` element.\n     */\n    name?: string;\n    /**\n     * Callback function that is fired when the slider's value changed.\n     *\n     * @param {Event} event The event source of the callback.\n     * You can pull out the new value by accessing `event.target.value` (any).\n     * **Warning**: This is a generic event not a change event.\n     * @param {number | number[]} value The new value.\n     * @param {number} activeThumb Index of the currently moved thumb.\n     */\n    onChange?: (event: Event, value: number | number[], activeThumb: number) => void;\n    /**\n     * Callback function that is fired when the `mouseup` is triggered.\n     *\n     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n     * @param {number | number[]} value The new value.\n     */\n    onChangeCommitted?: (event: React.SyntheticEvent | Event, value: number | number[]) => void;\n    /**\n     * The component orientation.\n     * @default 'horizontal'\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * A transformation function, to change the scale of the slider.\n     * @param {any} x\n     * @returns {any}\n     * @default function Identity(x) {\n     *   return x;\n     * }\n     */\n    scale?: (value: number) => number;\n    /**\n     * The size of the slider.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium', SliderPropsSizeOverrides>;\n    /**\n     * The props used for each slot inside the Slider.\n     * @default {}\n     */\n    slotProps?: {\n      root?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      track?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      rail?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      thumb?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      mark?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      markLabel?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n      valueLabel?: SlotComponentProps<\n        typeof SliderValueLabelComponent,\n        SliderComponentsPropsOverrides,\n        SliderOwnerState\n      >;\n      input?: SlotComponentProps<'input', SliderComponentsPropsOverrides, SliderOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Slider.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: {\n      root?: React.ElementType;\n      track?: React.ElementType;\n      rail?: React.ElementType;\n      thumb?: React.ElementType;\n      mark?: React.ElementType;\n      markLabel?: React.ElementType;\n      valueLabel?: React.ElementType;\n      input?: React.ElementType;\n    };\n    /**\n     * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n     * The `min` prop serves as the origin for the valid values.\n     * We recommend (max - min) to be evenly divisible by the step.\n     *\n     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n     * @default 1\n     */\n    step?: number | null;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Tab index attribute of the hidden `input` element.\n     */\n    tabIndex?: number;\n    /**\n     * The track presentation:\n     *\n     * - `normal` the track will render a bar representing the slider value.\n     * - `inverted` the track will render a bar representing the remaining slider value.\n     * - `false` the track will render without a bar.\n     * @default 'normal'\n     */\n    track?: 'normal' | false | 'inverted';\n    /**\n     * The value of the slider.\n     * For ranged sliders, provide an array with two values.\n     */\n    value?: number | number[];\n    /**\n     * Controls when the value label is displayed:\n     *\n     * - `auto` the value label will display when the thumb is hovered or focused.\n     * - `on` will display persistently.\n     * - `off` will never display.\n     * @default 'off'\n     */\n    valueLabelDisplay?: 'on' | 'auto' | 'off';\n    /**\n     * The format function the value label's value.\n     *\n     * When a function is provided, it should have the following signature:\n     *\n     * - {number} value The value label's value to format\n     * - {number} index The value label's index to format\n     * @param {any} x\n     * @returns {any}\n     * @default function Identity(x) {\n     *   return x;\n     * }\n     */\n    valueLabelFormat?: string | ((value: number, index: number) => React.ReactNode);\n  };\n  defaultComponent: D;\n}\n\nexport interface SliderValueLabelProps extends React.HTMLAttributes<HTMLSpanElement> {\n  children: React.ReactElement;\n  index: number;\n  open: boolean;\n  value: number;\n}\n\ntype SliderRootProps = NonNullable<SliderTypeMap['props']['componentsProps']>['root'];\ntype SliderMarkProps = NonNullable<SliderTypeMap['props']['componentsProps']>['mark'];\ntype SliderMarkLabelProps = NonNullable<SliderTypeMap['props']['componentsProps']>['markLabel'];\ntype SliderRailProps = NonNullable<SliderTypeMap['props']['componentsProps']>['rail'];\ntype SliderTrackProps = NonNullable<SliderTypeMap['props']['componentsProps']>['track'];\ntype SliderThumbProps = NonNullable<SliderTypeMap['props']['componentsProps']>['thumb'];\n\nexport declare const SliderRoot: React.FC<SliderRootProps>;\nexport declare const SliderMark: React.FC<SliderMarkProps>;\nexport declare const SliderMarkLabel: React.FC<SliderMarkLabelProps>;\nexport declare const SliderRail: React.FC<SliderRailProps>;\nexport declare const SliderTrack: React.FC<SliderTrackProps>;\nexport declare const SliderThumb: React.FC<SliderThumbProps>;\nexport declare const SliderValueLabel: React.FC<SliderValueLabelProps>;\n\n/**\n *\n * Demos:\n *\n * - [Slider](https://mui.com/material-ui/react-slider/)\n *\n * API:\n *\n * - [Slider API](https://mui.com/material-ui/api/slider/)\n */\ndeclare const Slider: OverridableComponent<SliderTypeMap>;\n\nexport type SliderProps<\n  D extends React.ElementType = SliderTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<SliderTypeMap<D, P>, D>;\n\nexport default Slider;\n",
  },
  {
    component: "Snackbar",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ClickAwayListenerProps } from '@mui/base/ClickAwayListener';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { SnackbarContentProps } from '../SnackbarContent';\nimport { TransitionProps } from '../transitions/transition';\nimport { SnackbarClasses } from './snackbarClasses';\n\nexport interface SnackbarOrigin {\n  vertical: 'top' | 'bottom';\n  horizontal: 'left' | 'center' | 'right';\n}\n\nexport type SnackbarCloseReason = 'timeout' | 'clickaway' | 'escapeKeyDown';\n\nexport interface SnackbarProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action?: SnackbarContentProps['action'];\n  /**\n   * The anchor of the `Snackbar`.\n   * On smaller screens, the component grows to occupy all the available width,\n   * the horizontal alignment is ignored.\n   * @default { vertical: 'bottom', horizontal: 'left' }\n   */\n  anchorOrigin?: SnackbarOrigin;\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration?: number | null;\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children?: React.ReactElement<any, any>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SnackbarClasses>;\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps?: Partial<ClickAwayListenerProps>;\n  /**\n   * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.\n   */\n  ContentProps?: Partial<SnackbarContentProps>;\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener?: boolean;\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key?: any;\n  /**\n   * The message to display.\n   */\n  message?: SnackbarContentProps['message'];\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose?: (event: React.SyntheticEvent<any> | Event, reason: SnackbarCloseReason) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration?: number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/material-ui/api/snackbar/)\n */\nexport default function Snackbar(props: SnackbarProps): JSX.Element;\n",
  },
  {
    component: "SnackbarContent",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { PaperProps } from '../Paper';\nimport { SnackbarContentClasses } from './snackbarContentClasses';\n\nexport interface SnackbarContentProps extends StandardProps<PaperProps, 'children'> {\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SnackbarContentClasses>;\n  /**\n   * The message to display.\n   */\n  message?: React.ReactNode;\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role?: PaperProps['role'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [SnackbarContent API](https://mui.com/material-ui/api/snackbar-content/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function SnackbarContent(props: SnackbarContentProps): JSX.Element;\n",
  },
  {
    component: "SpeedDial",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FabProps } from '../Fab';\nimport { TransitionProps } from '../transitions';\nimport { SpeedDialClasses } from './speedDialClasses';\n\nexport type CloseReason = 'toggle' | 'blur' | 'mouseLeave' | 'escapeKeyDown';\nexport type OpenReason = 'toggle' | 'focus' | 'mouseEnter';\n\nexport interface SpeedDialProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * SpeedDialActions to display when the SpeedDial is `open`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialClasses>;\n  /**\n   * The aria-label of the button element.\n   * Also used to provide the `id` for the `SpeedDial` element and its children.\n   */\n  ariaLabel: string;\n  /**\n   * The direction the actions open relative to the floating action button.\n   * @default 'up'\n   */\n  direction?: 'up' | 'down' | 'left' | 'right';\n  /**\n   * If `true`, the SpeedDial is hidden.\n   * @default false\n   */\n  hidden?: boolean;\n  /**\n   * Props applied to the [`Fab`](/material-ui/api/fab/) element.\n   * @default {}\n   */\n  FabProps?: Partial<FabProps>;\n  /**\n   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\n   * provides a default Icon with animation.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.\n   */\n  onClose?: (event: React.SyntheticEvent<{}>, reason: CloseReason) => void;\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.\n   */\n  onOpen?: (event: React.SyntheticEvent<{}>, reason: OpenReason) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The icon to display in the SpeedDial Fab when the SpeedDial is open.\n   */\n  openIcon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Zoom\n   */\n  TransitionComponent?: React.JSXElementConstructor<TransitionProps>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDial API](https://mui.com/material-ui/api/speed-dial/)\n */\nexport default function SpeedDial(props: SpeedDialProps): JSX.Element;\n",
  },
  {
    component: "SpeedDialAction",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FabProps } from '../Fab';\nimport { TooltipProps } from '../Tooltip';\nimport { SpeedDialActionClasses } from './speedDialActionClasses';\n\nexport interface SpeedDialActionProps extends StandardProps<Partial<TooltipProps>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialActionClasses>;\n  /**\n   * Props applied to the [`Fab`](/material-ui/api/fab/) component.\n   * @default {}\n   */\n  FabProps?: Partial<FabProps>;\n  /**\n   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.\n   * @default 0\n   */\n  delay?: number;\n  /**\n   * The icon to display in the SpeedDial Fab.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.\n   */\n  TooltipClasses?: TooltipProps['classes'];\n  /**\n   * Placement of the tooltip.\n   * @default 'left'\n   */\n  tooltipPlacement?: TooltipProps['placement'];\n  /**\n   * Label to display in the tooltip.\n   */\n  tooltipTitle?: React.ReactNode;\n  /**\n   * Make the tooltip always visible when the SpeedDial is open.\n   * @default false\n   */\n  tooltipOpen?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDialAction API](https://mui.com/material-ui/api/speed-dial-action/)\n * - inherits [Tooltip API](https://mui.com/material-ui/api/tooltip/)\n */\nexport default function SpeedDialAction(props: SpeedDialActionProps): JSX.Element;\n",
  },
  {
    component: "SpeedDialIcon",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { SpeedDialIconClasses } from './speedDialIconClasses';\n\nexport interface SpeedDialIconProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialIconClasses>;\n  /**\n   * The icon to display.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.\n   */\n  openIcon?: React.ReactNode;\n  /**\n   * @ignore\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDialIcon API](https://mui.com/material-ui/api/speed-dial-icon/)\n */\ndeclare const SpeedDialIcon: ((props: SpeedDialIconProps) => JSX.Element) & { muiName: string };\n\nexport default SpeedDialIcon;\n",
  },
  {
    component: "Stack",
    doc: "import * as React from 'react';\nimport { ResponsiveStyleValue, SxProps, SystemProps } from '@mui/system';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Theme } from '../styles/createTheme';\n\nexport interface StackTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P &\n    SystemProps<Theme> & {\n      /**\n       * The content of the component.\n       */\n      children?: React.ReactNode;\n      /**\n       * Defines the `flex-direction` style property.\n       * It is applied for all screen sizes.\n       * @default 'column'\n       */\n      direction?: ResponsiveStyleValue<'row' | 'row-reverse' | 'column' | 'column-reverse'>;\n      /**\n       * Defines the space between immediate children.\n       * @default 0\n       */\n      spacing?: ResponsiveStyleValue<number | string>;\n      /**\n       * Add an element between each child.\n       */\n      divider?: React.ReactNode;\n      /**\n       * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.\n       *\n       * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack#limitations),\n       * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.\n       *\n       * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.\n       * @default false\n       */\n      useFlexGap?: boolean;\n      /**\n       * The system prop, which allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n    };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Stack](https://mui.com/material-ui/react-stack/)\n *\n * API:\n *\n * - [Stack API](https://mui.com/material-ui/api/stack/)\n */\ndeclare const Stack: OverridableComponent<StackTypeMap>;\n\nexport type StackProps<\n  D extends React.ElementType = StackTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<StackTypeMap<P, D>, D>;\n\nexport default Stack;\n",
  },
  {
    component: "Step",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { StepClasses } from './stepClasses';\n\nexport interface StepTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * Sets the step as active. Is passed to child components.\n     */\n    active?: boolean;\n    /**\n     * Should be `Step` sub-components such as `StepLabel`, `StepContent`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<StepClasses>;\n    /**\n     * Mark the step as completed. Is passed to child components.\n     */\n    completed?: boolean;\n    /**\n     * If `true`, the step is disabled, will also disable the button if\n     * `StepButton` is a child of `Step`. Is passed to child components.\n     */\n    disabled?: boolean;\n    /**\n     * Expand the step.\n     * @default false\n     */\n    expanded?: boolean;\n    /**\n     * The position of the step.\n     * The prop defaults to the value inherited from the parent Stepper component.\n     */\n    index?: number;\n    /**\n     * If `true`, the Step is displayed as rendered last.\n     * The prop defaults to the value inherited from the parent Stepper component.\n     */\n    last?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\nexport type StepProps<\n  D extends React.ElementType = StepTypeMap['defaultComponent'],\n  P = { component?: React.ElementType },\n> = OverrideProps<StepTypeMap<P, D>, D>;\n\nexport type StepClasskey = keyof NonNullable<StepProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [Step API](https://mui.com/material-ui/api/step/)\n */\ndeclare const Step: OverridableComponent<StepTypeMap>;\n\nexport default Step;\n",
  },
  {
    component: "StepButton",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { StepButtonClasses } from './stepButtonClasses';\n\n/**\n * @deprecated use `StepButtonProps['icon']` instead\n */\nexport type StepButtonIcon = React.ReactNode;\n\nexport type StepButtonTypeMap<P, D extends React.ElementType> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<StepButtonClasses>;\n    /**\n     * The icon displayed by the step label.\n     */\n    icon?: React.ReactNode;\n    /**\n     * The optional node to display.\n     */\n    optional?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n\n  ignoredProps: 'disabled';\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepButton API](https://mui.com/material-ui/api/step-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const StepButton: ExtendButtonBase<\n  StepButtonTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type StepButtonClasskey = keyof NonNullable<StepButtonProps['classes']>;\n\nexport type StepButtonProps<\n  D extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<StepButtonTypeMap<P, D>, D>;\n\nexport default StepButton;\n",
  },
  {
    component: "StepConnector",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { StepConnectorClasses } from './stepConnectorClasses';\n\nexport type StepConnectorIcon = React.ReactElement | string | number;\n\nexport interface StepConnectorProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepConnectorClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepConnectorClasskey = keyof NonNullable<StepConnectorProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepConnector API](https://mui.com/material-ui/api/step-connector/)\n */\nexport default function StepConnector(props: StepConnectorProps): JSX.Element;\n",
  },
  {
    component: "StepContent",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { StepContentClasses } from './stepContentClasses';\n\nexport interface StepContentProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepContentClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Adjust the duration of the content expand transition.\n   * Passed as a prop to the transition component.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\nexport type StepContentClasskey = keyof NonNullable<StepContentProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepContent API](https://mui.com/material-ui/api/step-content/)\n */\nexport default function StepContent(props: StepContentProps): JSX.Element;\n",
  },
  {
    component: "StepIcon",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { StepIconClasses } from './stepIconClasses';\n\nexport interface StepIconProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * Whether this step is active.\n   * @default false\n   */\n  active?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepIconClasses>;\n  /**\n   * Mark the step as completed. Is passed to child components.\n   * @default false\n   */\n  completed?: boolean;\n  /**\n   * If `true`, the step is marked as failed.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepIconClasskey = keyof NonNullable<StepIconProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepIcon API](https://mui.com/material-ui/api/step-icon/)\n */\nexport default function StepIcon(props: StepIconProps): JSX.Element;\n",
  },
  {
    component: "StepLabel",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { StepIconProps } from '../StepIcon';\nimport { Theme } from '../styles';\nimport { StepLabelClasses } from './stepLabelClasses';\n\nexport interface StepLabelProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * In most cases will simply be a string containing a title for the label.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepLabelClasses>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    /**\n     * Props applied to the label element.\n     * @default {}\n     */\n    label?: React.HTMLProps<HTMLSpanElement>;\n  };\n  /**\n   * If `true`, the step is marked as failed.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * Override the default label of the step icon.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The optional node to display.\n   */\n  optional?: React.ReactNode;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    /**\n     * Props applied to the label element.\n     * @default {}\n     */\n    label?: React.HTMLProps<HTMLSpanElement>;\n  };\n  /**\n   * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).\n   */\n  StepIconComponent?: React.ElementType;\n  /**\n   * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.\n   */\n  StepIconProps?: Partial<StepIconProps>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepLabelClasskey = keyof NonNullable<StepLabelProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepLabel API](https://mui.com/material-ui/api/step-label/)\n */\ndeclare const StepLabel: ((props: StepLabelProps) => JSX.Element) & { muiName: string };\n\nexport default StepLabel;\n",
  },
  {
    component: "Stepper",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { PaperProps } from '../Paper';\nimport { StepperClasses } from './stepperClasses';\n\nexport type Orientation = 'horizontal' | 'vertical';\n\nexport interface StepperTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P &\n    Pick<PaperProps, 'elevation' | 'square' | 'variant'> & {\n      /**\n       * Set the active step (zero based index).\n       * Set to -1 to disable all the steps.\n       * @default 0\n       */\n      activeStep?: number;\n      /**\n       * If set to 'true' and orientation is horizontal,\n       * then the step label will be positioned under the icon.\n       * @default false\n       */\n      alternativeLabel?: boolean;\n      /**\n       * Two or more `<Step />` components.\n       */\n      children?: React.ReactNode;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<StepperClasses>;\n      /**\n       * An element to be placed between each step.\n       * @default <StepConnector />\n       */\n      connector?: React.ReactElement<any, any> | null;\n      /**\n       * If set the `Stepper` will not assist in controlling steps for linear flow.\n       * @default false\n       */\n      nonLinear?: boolean;\n      /**\n       * The component orientation (layout flow direction).\n       * @default 'horizontal'\n       */\n      orientation?: Orientation;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n    };\n  defaultComponent: D;\n}\n\nexport type StepperProps<\n  D extends React.ElementType = StepperTypeMap['defaultComponent'],\n  P = { component?: React.ElementType },\n> = OverrideProps<StepperTypeMap<P, D>, D>;\n\nexport type StepperClasskey = keyof NonNullable<StepperProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [Stepper API](https://mui.com/material-ui/api/stepper/)\n */\ndeclare const Stepper: OverridableComponent<StepperTypeMap>;\n\nexport default Stepper;\n",
  },
  {
    component: "SvgIcon",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { SvgIconClasses } from './svgIconClasses';\n\nexport interface SvgIconPropsSizeOverrides {}\n\nexport interface SvgIconPropsColorOverrides {}\n\nexport interface SvgIconTypeMap<P = {}, D extends React.ElementType = 'svg'> {\n  props: P & {\n    /**\n     * Node passed into the SVG element.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<SvgIconClasses>;\n    /**\n     * The color of the component.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n     * @default 'inherit'\n     */\n    color?: OverridableStringUnion<\n      | 'inherit'\n      | 'action'\n      | 'disabled'\n      | 'primary'\n      | 'secondary'\n      | 'error'\n      | 'info'\n      | 'success'\n      | 'warning',\n      SvgIconPropsColorOverrides\n    >;\n    /**\n     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n     * @default 'medium'\n     */\n    fontSize?: OverridableStringUnion<\n      'inherit' | 'large' | 'medium' | 'small',\n      SvgIconPropsSizeOverrides\n    >;\n    /**\n     * Applies a color attribute to the SVG element.\n     */\n    htmlColor?: string;\n    /**\n     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n     * prop will be ignored.\n     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n     * `component`'s viewBox to the root node.\n     * @default false\n     */\n    inheritViewBox?: boolean;\n    /**\n     * The shape-rendering attribute. The behavior of the different options is described on the\n     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n     * If you are having issues with blurry icons you should investigate this prop.\n     */\n    shapeRendering?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Provides a human-readable title for the element that contains it.\n     * https://www.w3.org/TR/SVG-access/#Equivalent\n     */\n    titleAccess?: string;\n    /**\n     * Allows you to redefine what the coordinates without units mean inside an SVG element.\n     * For example, if the SVG element is 500 (width) by 200 (height),\n     * and you pass viewBox=\"0 0 50 20\",\n     * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n     * to bottom right (50,20) and each unit will be worth 10px.\n     * @default '0 0 24 24'\n     */\n    viewBox?: string;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Icons](https://mui.com/material-ui/icons/)\n * - [Material Icons](https://mui.com/material-ui/material-icons/)\n *\n * API:\n *\n * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n */\ndeclare const SvgIcon: OverridableComponent<SvgIconTypeMap> & { muiName: string };\n\nexport type SvgIconProps<\n  D extends React.ElementType = SvgIconTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<SvgIconTypeMap<P, D>, D>;\n\nexport default SvgIcon;\n",
  },
  {
    component: "SwipeableDrawer",
    doc: "import * as React from 'react';\nimport { DrawerProps } from '../Drawer';\n\nexport interface SwipeableDrawerProps extends Omit<DrawerProps, 'onClose' | 'open'> {\n  /**\n   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.\n   * This can be useful in scenarios where the drawer is partially visible.\n   * You can customize it further with a callback that determines which children the user can drag over to open the drawer\n   * (for example, to ignore other elements that handle touch move events, like sliders).\n   *\n   * @param {TouchEvent} event The 'touchstart' event\n   * @param {HTMLDivElement} swipeArea The swipe area element\n   * @param {HTMLDivElement} paper The drawer's paper element\n   *\n   * @default false\n   */\n  allowSwipeInChildren?:\n    | boolean\n    | ((e: TouchEvent, swipeArea: HTMLDivElement, paper: HTMLDivElement) => boolean);\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition?: boolean;\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery?: boolean;\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen?: boolean;\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis?: number;\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity?: number;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onClose: React.ReactEventHandler<{}>;\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onOpen: React.ReactEventHandler<{}>;\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open?: boolean;\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps?: object;\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth?: number;\n}\n\n/**\n *\n * Demos:\n *\n * - [Drawer](https://mui.com/material-ui/react-drawer/)\n *\n * API:\n *\n * - [SwipeableDrawer API](https://mui.com/material-ui/api/swipeable-drawer/)\n * - inherits [Drawer API](https://mui.com/material-ui/api/drawer/)\n */\ndeclare const SwipeableDrawer: React.JSXElementConstructor<SwipeableDrawerProps>;\n\nexport default SwipeableDrawer;\n",
  },
  {
    component: "Switch",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { SwitchClasses } from './switchClasses';\n\nexport interface SwitchPropsSizeOverrides {}\n\nexport interface SwitchPropsColorOverrides {}\n\nexport interface SwitchProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon'> {\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SwitchClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    SwitchPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense switch styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', SwitchPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value?: unknown;\n}\n\n/**\n *\n * Demos:\n *\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/material-ui/api/switch/)\n * - inherits [IconButton API](https://mui.com/material-ui/api/icon-button/)\n */\nexport default function Switch(props: SwitchProps): JSX.Element;\n",
  },
  {
    component: "Tab",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { TabClasses } from './tabClasses';\n\nexport type TabTypeMap<P = {}, D extends React.ElementType = 'div'> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * This prop isn't supported.\n     * Use the `component` prop if you need to change the children structure.\n     */\n    children?: null;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TabClasses>;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the  keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * The icon to display.\n     */\n    icon?: string | React.ReactElement;\n    /**\n     * The position of the icon relative to the label.\n     * @default 'top'\n     */\n    iconPosition?: 'top' | 'bottom' | 'start' | 'end';\n    /**\n     * The label element.\n     */\n    label?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * You can provide your own value. Otherwise, we fallback to the child position index.\n     */\n    value?: any;\n    /**\n     * Tab labels appear in a single row.\n     * They can use a second line if needed.\n     * @default false\n     */\n    wrapped?: boolean;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/material-ui/api/tab/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Tab: ExtendButtonBase<TabTypeMap>;\n\nexport type TabProps<\n  D extends React.ElementType = TabTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TabTypeMap<P, D>, D>;\n\nexport default Tab;\n",
  },
  {
    component: "Table",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableClasses } from './tableClasses';\n\nexport interface TablePropsSizeOverrides {}\n\nexport interface TableTypeMap<P = {}, D extends React.ElementType = 'table'> {\n  props: P & {\n    /**\n     * The content of the table, normally `TableHead` and `TableBody`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableClasses>;\n    /**\n     * Allows TableCells to inherit padding of the Table.\n     * @default 'normal'\n     */\n    padding?: 'normal' | 'checkbox' | 'none';\n    /**\n     * Allows TableCells to inherit size of the Table.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium', TablePropsSizeOverrides>;\n    /**\n     * Set the header sticky.\n     *\n     * ⚠️ It doesn't work with IE11.\n     * @default false\n     */\n    stickyHeader?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [Table API](https://mui.com/material-ui/api/table/)\n */\ndeclare const Table: OverridableComponent<TableTypeMap>;\n\nexport type TableProps<\n  D extends React.ElementType = TableTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableTypeMap<P, D>, D>;\n\nexport default Table;\n",
  },
  {
    component: "TableBody",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableBodyClasses } from './tableBodyClasses';\n\nexport interface TableBodyTypeMap<P = {}, D extends React.ElementType = 'tbody'> {\n  props: P & {\n    /**\n     * The content of the component, normally `TableRow`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableBodyClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableBody API](https://mui.com/material-ui/api/table-body/)\n */\ndeclare const TableBody: OverridableComponent<TableBodyTypeMap>;\n\nexport type TableBodyProps<\n  D extends React.ElementType = TableBodyTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableBodyTypeMap<P, D>, D>;\n\nexport default TableBody;\n",
  },
  {
    component: "TableCell",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TableCellClasses } from './tableCellClasses';\n\nexport interface TableCellPropsSizeOverrides {}\nexport interface TableCellPropsVariantOverrides {}\n\n/**\n * `<TableCell>` will be rendered as an `<th>`or `<td>` depending\n * on the context it is used in. Where context literally is the\n * React `context`.\n *\n * Since it is not decided via prop, we have create loose typings\n * here.\n */\nexport interface TableCellProps extends StandardProps<TableCellBaseProps, 'align'> {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   * @default 'inherit'\n   */\n  align?: 'inherit' | 'left' | 'center' | 'right' | 'justify';\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableCellClasses>;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType<TableCellBaseProps>;\n  /**\n   * Sets the padding applied to the cell.\n   * The prop defaults to the value (`'default'`) inherited from the parent Table component.\n   */\n  padding?: 'normal' | 'checkbox' | 'none';\n  /**\n   * Set scope attribute.\n   */\n  scope?: TableCellBaseProps['scope'];\n  /**\n   * Specify the size of the cell.\n   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', TableCellPropsSizeOverrides>;\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection?: SortDirection;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Specify the cell type.\n   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.\n   */\n  variant?: OverridableStringUnion<'head' | 'body' | 'footer', TableCellPropsVariantOverrides>;\n}\n\nexport type TableCellBaseProps = React.ThHTMLAttributes<HTMLTableCellElement> &\n  React.TdHTMLAttributes<HTMLTableCellElement>;\n\nexport type SortDirection = 'asc' | 'desc' | false;\n\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableCell API](https://mui.com/material-ui/api/table-cell/)\n */\nexport default function TableCell(props: TableCellProps): JSX.Element;\n",
  },
  {
    component: "TableContainer",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableContainerClasses } from './tableContainerClasses';\n\nexport interface TableContainerTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The content of the component, normally `Table`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableContainerClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableContainer API](https://mui.com/material-ui/api/table-container/)\n */\ndeclare const TableContainer: OverridableComponent<TableContainerTypeMap>;\n\nexport type TableContainerProps<\n  D extends React.ElementType = TableContainerTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableContainerTypeMap<P, D>, D>;\n\nexport default TableContainer;\n",
  },
  {
    component: "TableFooter",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableFooterClasses } from './tableFooterClasses';\n\nexport interface TableFooterTypeMap<P = {}, D extends React.ElementType = 'tfoot'> {\n  props: P & {\n    /**\n     * The content of the component, normally `TableRow`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableFooterClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableFooter API](https://mui.com/material-ui/api/table-footer/)\n */\ndeclare const TableFooter: OverridableComponent<TableFooterTypeMap>;\n\nexport type TableFooterProps<\n  D extends React.ElementType = TableFooterTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableFooterTypeMap<P, D>, D>;\n\nexport default TableFooter;\n",
  },
  {
    component: "TableHead",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableHeadClasses } from './tableHeadClasses';\n\nexport interface TableHeadTypeMap<P = {}, D extends React.ElementType = 'thead'> {\n  props: P & {\n    /**\n     * The content of the component, normally `TableRow`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableHeadClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableHead API](https://mui.com/material-ui/api/table-head/)\n */\ndeclare const TableHead: OverridableComponent<TableHeadTypeMap>;\n\nexport type TableHeadProps<\n  D extends React.ElementType = TableHeadTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableHeadTypeMap<P, D>, D>;\n\nexport default TableHead;\n",
  },
  {
    component: "TablePagination",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TablePaginationActionsProps } from './TablePaginationActions';\nimport { TableCellProps } from '../TableCell';\nimport { IconButtonProps } from '../IconButton';\nimport { SelectProps } from '../Select';\nimport { TablePaginationClasses } from './tablePaginationClasses';\n\nexport interface LabelDisplayedRowsArgs {\n  from: number;\n  to: number;\n  count: number;\n  page: number;\n}\n\nexport interface TablePaginationTypeMap<P, D extends React.ElementType> {\n  props: P &\n    TablePaginationBaseProps & {\n      /**\n       * The component used for displaying the actions.\n       * Either a string to use a HTML element or a component.\n       * @default TablePaginationActions\n       */\n      ActionsComponent?: React.ElementType<TablePaginationActionsProps>;\n      /**\n       * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.\n       */\n      backIconButtonProps?: Partial<IconButtonProps>;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<TablePaginationClasses>;\n      /**\n       * The total number of rows.\n       *\n       * To enable server side pagination for an unknown number of items, provide -1.\n       */\n      count: number;\n      /**\n       * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n       * This is important for screen reader users.\n       *\n       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n       * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n       * @returns {string}\n       * @default function defaultGetAriaLabel(type) {\n       *   return `Go to ${type} page`;\n       * }\n       */\n      getItemAriaLabel?: (type: 'first' | 'last' | 'next' | 'previous') => string;\n      /**\n       * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n       * object.\n       *\n       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n       * @default function defaultLabelDisplayedRows({ from, to, count }) {\n       *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n       * }\n       */\n      labelDisplayedRows?: (paginationInfo: LabelDisplayedRowsArgs) => React.ReactNode;\n      /**\n       * Customize the rows per page label.\n       *\n       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n       * @default 'Rows per page:'\n       */\n      labelRowsPerPage?: React.ReactNode;\n      /**\n       * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.\n       */\n      nextIconButtonProps?: Partial<IconButtonProps>;\n      /**\n       * Callback fired when the page is changed.\n       *\n       * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n       * @param {number} page The page selected.\n       */\n      onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n      /**\n       * Callback fired when the number of rows per page is changed.\n       *\n       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n       */\n      onRowsPerPageChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n      /**\n       * The zero-based index of the current page.\n       */\n      page: number;\n      /**\n       * The number of rows per page.\n       *\n       * Set -1 to display all the rows.\n       */\n      rowsPerPage: number;\n      /**\n       * Customizes the options of the rows per page select field. If less than two options are\n       * available, no select field will be displayed.\n       * Use -1 for the value with a custom label to show all the rows.\n       * @default [10, 25, 50, 100]\n       */\n      rowsPerPageOptions?: Array<number | { value: number; label: string }>;\n      /**\n       * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.\n       * @default {}\n       */\n      SelectProps?: Partial<SelectProps>;\n      /**\n       * If `true`, show the first-page button.\n       * @default false\n       */\n      showFirstButton?: boolean;\n      /**\n       * If `true`, show the last-page button.\n       * @default false\n       */\n      showLastButton?: boolean;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n    };\n  defaultComponent: D;\n}\n\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TablePagination API](https://mui.com/material-ui/api/table-pagination/)\n * - inherits [TableCell API](https://mui.com/material-ui/api/table-cell/)\n */\ndeclare const TablePagination: OverridableComponent<\n  TablePaginationTypeMap<{}, React.JSXElementConstructor<TablePaginationBaseProps>>\n>;\n\nexport type TablePaginationBaseProps = Omit<TableCellProps, 'classes' | 'component' | 'children'>;\n\nexport type TablePaginationProps<\n  D extends React.ElementType = React.JSXElementConstructor<TablePaginationBaseProps>,\n  P = {},\n> = OverrideProps<TablePaginationTypeMap<P, D>, D>;\n\nexport default TablePagination;\n",
  },
  {
    component: "TableRow",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableRowClasses } from './tableRowClasses';\n\nexport interface TableRowTypeMap<P = {}, D extends React.ElementType = 'tr'> {\n  props: P & {\n    /**\n     * Should be valid <tr> children such as `TableCell`.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableRowClasses>;\n    /**\n     * If `true`, the table row will shade on hover.\n     * @default false\n     */\n    hover?: boolean;\n    /**\n     * If `true`, the table row will have the selected shading.\n     * @default false\n     */\n    selected?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableRow API](https://mui.com/material-ui/api/table-row/)\n */\ndeclare const TableRow: OverridableComponent<TableRowTypeMap>;\n\nexport type TableRowProps<\n  D extends React.ElementType = TableRowTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableRowTypeMap<P, D>, D>;\n\nexport default TableRow;\n",
  },
  {
    component: "TableSortLabel",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { TableSortLabelClasses } from './tableSortLabelClasses';\n\nexport type TableSortLabelTypeMap<\n  P = {},\n  D extends React.ElementType = 'span',\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * If `true`, the label will have the active styling (should be true for the sorted column).\n     * @default false\n     */\n    active?: boolean;\n    /**\n     * Label contents, the arrow will be appended automatically.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TableSortLabelClasses>;\n    /**\n     * The current sort direction.\n     * @default 'asc'\n     */\n    direction?: 'asc' | 'desc';\n    /**\n     * Hide sort icon when active is false.\n     * @default false\n     */\n    hideSortIcon?: boolean;\n    /**\n     * Sort icon to use.\n     * @default ArrowDownwardIcon\n     */\n    IconComponent?: React.JSXElementConstructor<{ className: string }>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableSortLabel API](https://mui.com/material-ui/api/table-sort-label/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const TableSortLabel: ExtendButtonBase<TableSortLabelTypeMap>;\n\nexport type TableSortLabelProps<\n  D extends React.ElementType = TableSortLabelTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TableSortLabelTypeMap<P, D>, D>;\n\nexport default TableSortLabel;\n",
  },
  {
    component: "Tabs",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport ButtonBase from '../ButtonBase';\nimport { TabScrollButtonProps } from '../TabScrollButton';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TabsClasses } from './tabsClasses';\nimport SvgIcon from '../SvgIcon';\n\nexport interface TabsPropsIndicatorColorOverrides {}\n\nexport interface TabsStartScrollButtonIconSlotPropsOverrides {}\nexport interface TabsEndScrollButtonIconSlotPropsOverrides {}\n\nexport interface TabsOwnerState extends TabsProps {\n  vertical: boolean;\n  fixed: boolean;\n  hideScrollbar: boolean;\n  scrollableX: boolean;\n  scrollableY: boolean;\n  centered: boolean;\n  scrollButtonsHideMobile: boolean;\n}\n\nexport interface TabsTypeMap<P = {}, D extends React.ElementType = typeof ButtonBase> {\n  props: P & {\n    /**\n     * Callback fired when the component mounts.\n     * This is useful when you want to trigger an action programmatically.\n     * It supports two actions: `updateIndicator()` and `updateScrollButtons()`\n     *\n     * @param {object} actions This object contains all possible actions\n     * that can be triggered programmatically.\n     */\n    action?: React.Ref<TabsActions>;\n    /**\n     * If `true`, the scroll buttons aren't forced hidden on mobile.\n     * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.\n     * @default false\n     */\n    allowScrollButtonsMobile?: boolean;\n    /**\n     * The label for the Tabs as a string.\n     */\n    'aria-label'?: string;\n    /**\n     * An id or list of ids separated by a space that label the Tabs.\n     */\n    'aria-labelledby'?: string;\n    /**\n     * If `true`, the tabs are centered.\n     * This prop is intended for large views.\n     * @default false\n     */\n    centered?: boolean;\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TabsClasses>;\n    /**\n     * The components used for each slot inside.\n     * @default {}\n     */\n    slots?: {\n      StartScrollButtonIcon?: React.ElementType;\n      EndScrollButtonIcon?: React.ElementType;\n    };\n    /**\n     * The extra props for the slot components.\n     * You can override the existing props or add new ones.\n     * @default {}\n     */\n    slotProps?: {\n      startScrollButtonIcon?: SlotComponentProps<\n        typeof SvgIcon,\n        TabsStartScrollButtonIconSlotPropsOverrides,\n        TabsOwnerState\n      >;\n      endScrollButtonIcon?: SlotComponentProps<\n        typeof SvgIcon,\n        TabsEndScrollButtonIconSlotPropsOverrides,\n        TabsOwnerState\n      >;\n    };\n    /**\n     * Determines the color of the indicator.\n     * @default 'primary'\n     */\n    indicatorColor?: OverridableStringUnion<\n      'secondary' | 'primary',\n      TabsPropsIndicatorColorOverrides\n    >;\n    /**\n     * Callback fired when the value changes.\n     *\n     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n     * @param {any} value We default to the index of the child (number)\n     */\n    onChange?: (event: React.SyntheticEvent, value: any) => void;\n    /**\n     * The component orientation (layout flow direction).\n     * @default 'horizontal'\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * The component used to render the scroll buttons.\n     * @default TabScrollButton\n     */\n    ScrollButtonComponent?: React.ElementType;\n    /**\n     * Determine behavior of scroll buttons when tabs are set to scroll:\n     *\n     * - `auto` will only present them when not all the items are visible.\n     * - `true` will always present them.\n     * - `false` will never present them.\n     *\n     * By default the scroll buttons are hidden on mobile.\n     * This behavior can be disabled with `allowScrollButtonsMobile`.\n     * @default 'auto'\n     */\n    scrollButtons?: 'auto' | true | false;\n    /**\n     * If `true` the selected tab changes on focus. Otherwise it only\n     * changes on activation.\n     */\n    selectionFollowsFocus?: boolean;\n    /**\n     * Props applied to the tab indicator element.\n     * @default  {}\n     */\n    TabIndicatorProps?: React.HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme> };\n    /**\n     * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.\n     * @default {}\n     */\n    TabScrollButtonProps?: Partial<TabScrollButtonProps>;\n    /**\n     * Determines the color of the `Tab`.\n     * @default 'primary'\n     */\n    textColor?: 'secondary' | 'primary' | 'inherit';\n    /**\n     * The value of the currently selected `Tab`.\n     * If you don't want any selected `Tab`, you can set this prop to `false`.\n     */\n    value?: any;\n    /**\n     *  Determines additional display behavior of the tabs:\n     *\n     *  - `scrollable` will invoke scrolling properties and allow for horizontally\n     *  scrolling (or swiping) of the tab bar.\n     *  -`fullWidth` will make the tabs grow to use all the available space,\n     *  which should be used for small views, like on mobile.\n     *  - `standard` will render the default state.\n     * @default 'standard'\n     */\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n    /**\n     * If `true`, the scrollbar is visible. It can be useful when displaying\n     * a long vertical list of tabs.\n     * @default false\n     */\n    visibleScrollbar?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [Tabs API](https://mui.com/material-ui/api/tabs/)\n */\ndeclare const Tabs: OverridableComponent<TabsTypeMap>;\n\nexport interface TabsActions {\n  updateIndicator(): void;\n  updateScrollButtons(): void;\n}\n\nexport type TabsProps<\n  D extends React.ElementType = TabsTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TabsTypeMap<P, D>, D>;\n\nexport default Tabs;\n",
  },
  {
    component: "TabScrollButton",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { InternalStandardProps as StandardProps, SvgIcon, Theme } from '..';\nimport { TabScrollButtonClasses } from './tabScrollButtonClasses';\n\nexport interface TabScrollButtonStartIconSlotPropsOverrides {}\nexport interface TabScrollButtonEndIconSlotPropsOverrides {}\n\nexport interface TabScrollButtonOwnerState extends TabScrollButtonProps {\n  isRtl: boolean;\n}\n\nexport interface TabScrollButtonProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TabScrollButtonClasses>;\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots?: {\n    StartScrollButtonIcon?: React.ElementType;\n    EndScrollButtonIcon?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   * @default {}\n   */\n  slotProps?: {\n    startScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabScrollButtonStartIconSlotPropsOverrides,\n      TabScrollButtonOwnerState\n    >;\n    endScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabScrollButtonEndIconSlotPropsOverrides,\n      TabScrollButtonOwnerState\n    >;\n  };\n  /**\n   * The direction the button should indicate.\n   */\n  direction: 'left' | 'right';\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The component orientation (layout flow direction).\n   */\n  orientation: 'horizontal' | 'vertical';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [TabScrollButton API](https://mui.com/material-ui/api/tab-scroll-button/)\n */\nexport default function TabScrollButton(props: TabScrollButtonProps): JSX.Element;\n",
  },
  {
    component: "TextField",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FormControlProps } from '../FormControl';\nimport { FormHelperTextProps } from '../FormHelperText';\nimport { InputBaseProps } from '../InputBase';\nimport { InputProps as StandardInputProps } from '../Input';\nimport { FilledInputProps } from '../FilledInput';\nimport { OutlinedInputProps } from '../OutlinedInput';\nimport { InputLabelProps } from '../InputLabel';\nimport { SelectProps } from '../Select';\nimport { Theme } from '../styles';\nimport { TextFieldClasses } from './textFieldClasses';\n\nexport interface TextFieldPropsColorOverrides {}\nexport interface TextFieldPropsSizeOverrides {}\n\nexport interface BaseTextFieldProps\n  extends StandardProps<\n    FormControlProps,\n    // event handlers are declared on derived interfaces\n    'onChange' | 'onBlur' | 'onFocus' | 'defaultValue'\n  > {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete?: string;\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * @ignore\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TextFieldClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    TextFieldPropsColorOverrides\n  >;\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: unknown;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps?: Partial<FormHelperTextProps>;\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The helper text content.\n   */\n  helperText?: React.ReactNode;\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id?: string;\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps?: Partial<InputLabelProps>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: InputBaseProps['inputProps'];\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * The label content.\n   */\n  label?: React.ReactNode;\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline?: boolean;\n  /**\n   * Name attribute of the `input` element.\n   */\n  name?: string;\n  onBlur?: InputBaseProps['onBlur'];\n  onFocus?: StandardInputProps['onFocus'];\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required?: boolean;\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows?: string | number;\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows?: string | number;\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows?: string | number;\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select?: boolean;\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps?: Partial<SelectProps>;\n  /**\n   * The size of the component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', TextFieldPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type?: React.InputHTMLAttributes<unknown>['type'];\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value?: unknown;\n}\n\nexport interface StandardTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: StandardInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: 'standard';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<StandardInputProps>;\n}\n\nexport interface FilledTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: FilledInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'filled';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<FilledInputProps>;\n}\n\nexport interface OutlinedTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: OutlinedInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'outlined';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<OutlinedInputProps>;\n}\n\nexport type TextFieldProps = StandardTextFieldProps | FilledTextFieldProps | OutlinedTextFieldProps;\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * *   [FormControl](https://mui.com/material-ui/api/form-control/)\n * *   [InputLabel](https://mui.com/material-ui/api/input-label/)\n * *   [FilledInput](https://mui.com/material-ui/api/filled-input/)\n * *   [OutlinedInput](https://mui.com/material-ui/api/outlined-input/)\n * *   [Input](https://mui.com/material-ui/api/input/)\n * *   [FormHelperText](https://mui.com/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * *   using the upper case props for passing values directly to the components\n * *   using the underlying components directly as shown in the demos\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [TextField API](https://mui.com/material-ui/api/text-field/)\n * - inherits [FormControl API](https://mui.com/material-ui/api/form-control/)\n */\nexport default function TextField(props: TextFieldProps): JSX.Element;\n",
  },
  {
    component: "ToggleButton",
    doc: "import { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport * as React from 'react';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { ToggleButtonClasses } from './toggleButtonClasses';\n\nexport interface ToggleButtonPropsSizeOverrides {}\n\nexport interface ToggleButtonPropsColorOverrides {}\n\nexport type ToggleButtonTypeMap<\n  P = {},\n  D extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: P & {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ToggleButtonClasses>;\n    /**\n     * The color of the button when it is in an active state.\n     * It supports both default and custom theme colors, which can be added as shown in the\n     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n     * @default 'standard'\n     */\n    color?: OverridableStringUnion<\n      'standard' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n      ToggleButtonPropsColorOverrides\n    >;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the  keyboard focus ripple is disabled.\n     * @default false\n     */\n    disableFocusRipple?: boolean;\n    /**\n     * If `true`, the button will take up the full width of its container.\n     * @default false\n     */\n    fullWidth?: boolean;\n    /**\n     * Callback fired when the state changes.\n     *\n     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n     * @param {any} value of the selected button.\n     */\n    onChange?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n    /**\n     * Callback fired when the button is clicked.\n     *\n     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n     * @param {any} value of the selected button.\n     */\n    onClick?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n    /**\n     * If `true`, the button is rendered in an active state.\n     */\n    selected?: boolean;\n    /**\n     * The size of the component.\n     * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n     * @default 'medium'\n     */\n    size?: OverridableStringUnion<'small' | 'medium' | 'large', ToggleButtonPropsSizeOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The value to associate with the button when selected in a\n     * ToggleButtonGroup.\n     */\n    value: NonNullable<unknown>;\n  };\n  defaultComponent: D;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Toggle Button](https://mui.com/material-ui/react-toggle-button/)\n *\n * API:\n *\n * - [ToggleButton API](https://mui.com/material-ui/api/toggle-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ToggleButton: ExtendButtonBase<ToggleButtonTypeMap>;\n\nexport type ToggleButtonProps<\n  D extends React.ElementType = ToggleButtonTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ToggleButtonTypeMap<P, D>, D>;\n\nexport default ToggleButton;\n",
  },
  {
    component: "ToggleButtonGroup",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { ToggleButtonGroupClasses } from './toggleButtonGroupClasses';\n\nexport interface ToggleButtonGroupPropsSizeOverrides {}\n\nexport interface ToggleButtonGroupPropsColorOverrides {}\n\nexport interface ToggleButtonGroupProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'children'> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ToggleButtonGroupClasses>;\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'standard' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    ToggleButtonGroupPropsColorOverrides\n  >;\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive?: boolean;\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', ToggleButtonGroupPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value?: any;\n}\n\n/**\n *\n * Demos:\n *\n * - [Toggle Button](https://mui.com/material-ui/react-toggle-button/)\n *\n * API:\n *\n * - [ToggleButtonGroup API](https://mui.com/material-ui/api/toggle-button-group/)\n */\nexport default function ToggleButtonGroup(props: ToggleButtonGroupProps): JSX.Element;\n",
  },
  {
    component: "Toolbar",
    doc: "import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ToolbarClasses } from './toolbarClasses';\n\nexport interface ToolbarPropsVariantOverrides {}\n\nexport interface ToolbarTypeMap<P = {}, D extends React.ElementType = 'div'> {\n  props: P & {\n    /**\n     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.\n     * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.\n     */\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<ToolbarClasses>;\n    /**\n     * If `true`, disables gutter padding.\n     * @default false\n     */\n    disableGutters?: boolean;\n    /**\n     * The variant to use.\n     * @default 'regular'\n     */\n    variant?: OverridableStringUnion<'regular' | 'dense', ToolbarPropsVariantOverrides>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n  };\n  defaultComponent: D;\n}\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n *\n * API:\n *\n * - [Toolbar API](https://mui.com/material-ui/api/toolbar/)\n */\ndeclare const Toolbar: OverridableComponent<ToolbarTypeMap>;\n\nexport type ToolbarProps<\n  D extends React.ElementType = ToolbarTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<ToolbarTypeMap<P, D>, D>;\n\nexport default Toolbar;\n",
  },
  {
    component: "Tooltip",
    doc: "import * as React from 'react';\nimport { MUIStyledCommonProps, SxProps } from '@mui/system';\nimport { PopperProps } from '@mui/material/Popper';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { TooltipClasses } from './tooltipClasses';\n\nexport interface TooltipComponentsPropsOverrides {}\n\nexport interface TooltipProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * If `true`, adds an arrow to the tooltip.\n   * @default false\n   */\n  arrow?: boolean;\n  /**\n   * Tooltip reference element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TooltipClasses>;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Popper?: React.ElementType<PopperProps>;\n    Transition?: React.ElementType;\n    Tooltip?: React.ElementType;\n    Arrow?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides;\n    transition?: TransitionProps & TooltipComponentsPropsOverrides;\n    tooltip?: React.HTMLProps<HTMLDivElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n    arrow?: React.HTMLProps<HTMLSpanElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n  };\n  /**\n   * Set to `true` if the `title` acts as an accessible description.\n   * By default the `title` acts as an accessible label for the child.\n   * @default false\n   */\n  describeChild?: boolean;\n  /**\n   * Do not respond to focus-visible events.\n   * @default false\n   */\n  disableFocusListener?: boolean;\n  /**\n   * Do not respond to hover events.\n   * @default false\n   */\n  disableHoverListener?: boolean;\n  /**\n   * Makes a tooltip not interactive, i.e. it will close when the user\n   * hovers over the tooltip before the `leaveDelay` is expired.\n   * @default false\n   */\n  disableInteractive?: boolean;\n  /**\n   * Do not respond to long press touch events.\n   * @default false\n   */\n  disableTouchListener?: boolean;\n  /**\n   * The number of milliseconds to wait before showing the tooltip.\n   * This prop won't impact the enter touch delay (`enterTouchDelay`).\n   * @default 100\n   */\n  enterDelay?: number;\n  /**\n   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.\n   * @default 0\n   */\n  enterNextDelay?: number;\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   * @default 700\n   */\n  enterTouchDelay?: number;\n  /**\n   * If `true`, the tooltip follow the cursor over the wrapped element.\n   * @default false\n   */\n  followCursor?: boolean;\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id?: string;\n  /**\n   * The number of milliseconds to wait before hiding the tooltip.\n   * This prop won't impact the leave touch delay (`leaveTouchDelay`).\n   * @default 0\n   */\n  leaveDelay?: number;\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   * @default 1500\n   */\n  leaveTouchDelay?: number;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent | Event) => void;\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen?: (event: React.SyntheticEvent) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * Tooltip placement.\n   * @default 'bottom'\n   */\n  placement?:\n    | 'bottom-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'left-end'\n    | 'left-start'\n    | 'left'\n    | 'right-end'\n    | 'right-start'\n    | 'right'\n    | 'top-end'\n    | 'top-start'\n    | 'top';\n  /**\n   * The component used for the popper.\n   * @default Popper\n   */\n  PopperComponent?: React.JSXElementConstructor<PopperProps>;\n  /**\n   * Props applied to the [`Popper`](/material-ui/api/popper/) element.\n   * @default {}\n   */\n  PopperProps?: Partial<PopperProps>;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides;\n    transition?: TransitionProps & TooltipComponentsPropsOverrides;\n    tooltip?: React.HTMLProps<HTMLDivElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n    arrow?: React.HTMLProps<HTMLSpanElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    popper?: React.ElementType<PopperProps>;\n    transition?: React.ElementType;\n    tooltip?: React.ElementType;\n    arrow?: React.ElementType;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.\n   */\n  title: React.ReactNode;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tooltip](https://mui.com/material-ui/react-tooltip/)\n *\n * API:\n *\n * - [Tooltip API](https://mui.com/material-ui/api/tooltip/)\n */\nexport default function Tooltip(props: TooltipProps): JSX.Element;\n",
  },
  {
    component: "Typography",
    doc: "import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps, SystemProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Variant } from '../styles/createTypography';\nimport { TypographyClasses } from './typographyClasses';\n\nexport interface TypographyPropsVariantOverrides {}\n\nexport interface TypographyTypeMap<P = {}, D extends React.ElementType = 'span'> {\n  props: P &\n    SystemProps<Theme> & {\n      /**\n       * Set the text-align on the component.\n       * @default 'inherit'\n       */\n      align?: 'inherit' | 'left' | 'center' | 'right' | 'justify';\n      /**\n       * The content of the component.\n       */\n      children?: React.ReactNode;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<TypographyClasses>;\n      /**\n       * If `true`, the text will have a bottom margin.\n       * @default false\n       */\n      gutterBottom?: boolean;\n      /**\n       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n       *\n       * Note that text overflow can only happen with block or inline-block level elements\n       * (the element needs to have a width in order to overflow).\n       * @default false\n       */\n      noWrap?: boolean;\n      /**\n       * If `true`, the element will be a paragraph element.\n       * @default false\n       */\n      paragraph?: boolean;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n      /**\n       * Applies the theme typography styles.\n       * @default 'body1'\n       */\n      variant?: OverridableStringUnion<Variant | 'inherit', TypographyPropsVariantOverrides>;\n      /**\n       * The component maps the variant prop to a range of different HTML element types.\n       * For instance, subtitle1 to `<h6>`.\n       * If you wish to change that mapping, you can provide your own.\n       * Alternatively, you can use the `component` prop.\n       * @default {\n       *   h1: 'h1',\n       *   h2: 'h2',\n       *   h3: 'h3',\n       *   h4: 'h4',\n       *   h5: 'h5',\n       *   h6: 'h6',\n       *   subtitle1: 'h6',\n       *   subtitle2: 'h6',\n       *   body1: 'p',\n       *   body2: 'p',\n       *   inherit: 'p',\n       * }\n       */\n      variantMapping?: Partial<\n        Record<OverridableStringUnion<Variant | 'inherit', TypographyPropsVariantOverrides>, string>\n      >;\n    };\n  defaultComponent: D;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n * - [Typography](https://mui.com/material-ui/react-typography/)\n *\n * API:\n *\n * - [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const Typography: OverridableComponent<TypographyTypeMap>;\n\nexport type TypographyProps<\n  D extends React.ElementType = TypographyTypeMap['defaultComponent'],\n  P = {},\n> = OverrideProps<TypographyTypeMap<P, D>, D>;\n\nexport default Typography;\n",
  },
  {
    component: "Zoom",
    doc: "import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface ZoomProps extends TransitionProps {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](https://mui.com/material-ui/react-button/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Zoom API](https://mui.com/material-ui/api/zoom/)\n * - inherits [Transition API](http://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Zoom(props: ZoomProps): JSX.Element;\n",
  },
];
